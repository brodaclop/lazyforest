{"version":3,"sources":["Vector.tsx","ShapeDrawer.tsx","Random.tsx","generators/Road.tsx","generators/SceneObjects.tsx","SceneGenerator.tsx","textures/gravel.jpg","textures/grass.jpg","textures/tree.png","textures/tree2.png","textures/rock.png","textures/dirtroad.jpg","textures/lightergrass.jpg","textures/water.jpg","textures/bridge.png","textures/bridge2.png","Textures.tsx","TextureSelector.tsx","ObjectLayerCard.tsx","CreateLayerCard.tsx","ListComponent.tsx","RoadLayerCard.tsx","VisualsCard.tsx","BaseLayerCard.tsx","RiverLayerCard.tsx","Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lineLength","from","to","Math","sqrt","lineNormal","vector","len","normalize","stretch","length","add","origin","subtract","invert","fromPolar","magnitude","dir","cos","sin","intersection","a","b","vectorA","vectorB","diff","ua_t","ub_t","u_b","ua","ub","console","log","JSON","stringify","window","test","drawScene","context","textures","scene","debug","globalScale","canvas","width","size","height","reset","setTransform","DOMMatrix","shadowOffsetX","shadowOffsetY","shadowColor","shadowBlur","fillStyle","strokeStyle","scale","sceneArea","shape","texture","name","beginPath","moveTo","vertices","slice","forEach","vertex","lineTo","closePath","edgeShade","rotate","textureScale","translate","stretchWidth","stretchHeight","angle","atan2","imageScale","loadedImage","drawImage","createPattern","fill","lineWidth","stroke","sceneObject","shadowDirection","orientation","naturalWidth","naturalHeight","shadowVector","point","style","arc","PI","debugPoint","radius","clearRect","Object","values","layers","layer","areas","sort","objects","ob","tint","fillRect","x","y","randomInt","max","floor","random","randomBetween","splitLine","splitRatio","lineVector","relative","splitPoint","normal","perturbation","createRectangle","widthAdjustment","centerline","topLine","map","bottomLine","reverse","generateRoad","bridgeTexture","river","intersectionPoints","line","area","ret","i","p1","p2","fraction","push","intersect","bridge1","bridge2","idx","split","splice","Road","endpoints","midpoint","reduce","acc","curr","flatMap","ep","placeObject","dim","avoid","tries","tried","candidate","farEnough","every","filter","spreadObjects","count","newPoint","concat","warn","inShapeFactory","OffscreenCanvas","getContext","path","Path2D","isPointInPath","SceneObjects","exclude","shapeChecker","sc","randomEdgePoint","side","chosenDim","pos","Error","SceneGenerator","baseTexture","base","type","mainWidth","mainEndpoints","sideRoads","extraEndpoints","bridge","currentObjects","roadAreas","road","newObjects","TINTS","sunset","evening","night","TEXTURES","url","water","category","gravel","dirt","grass","lighterGrass","tree","tree2","rock","Textures","onLoaded","useReducer","prevstate","action","imagesLoaded","imageLoaded","useEffect","t","document","getElementById","src","id","display","alt","onLoad","TextureSelector","value","onChange","Select","_","placeholder","options","keys","key","text","image","ObjectLayerCard","generateObjects","clearLayer","deleteLayer","useState","setCount","setTexture","Card","Header","textAlign","Content","Input","label","step","e","Number","target","ButtonGroup","Button","content","icon","disabled","onClick","CreateLayerCard","onCreate","setName","includes","ListComponent","items","itemFactory","addItem","removeItem","itemIcon","List","divided","relaxed","range","index","Item","Icon","floated","RoadLayerCard","generateRoads","sceneHasRiver","setMainWidth","setBridgeTexture","setSideRoads","VisualsCard","onShadowChange","onTintChange","resolution","onResolutionChange","onEdgeShadeChange","shadowLength","round","shadowAngle","BaseLayerCard","createScene","setWidth","setHeight","RiverLayerCard","generateRiver","Canvas","canvasRef","useRef","setTeztures","setScene","setResolution","setDebug","regenerateRoads","useCallback","regenerateRiver","removeLayer","createLayer","dimension","current","onTexturesLoaded","textureMap","Group","itemsPerRow","bind","shadow","Checkbox","checked","data","toggle","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3fa6e395.chunk.js","sourcesContent":["export type Point = [number, number];\r\n\r\nexport const lineLength = (from: Point, to: Point = [0, 0]): number => Math.sqrt((from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]));\r\n\r\nexport const normalize = (vector: Point): Point => {\r\n    const len = lineLength([0, 0], vector);\r\n    return [vector[0] / len, vector[1] / len];\r\n}\r\n\r\nexport const lineNormal = (from: Point, to: Point): Point => normalize([from[1] - to[1], to[0] - from[0]]);\r\n\r\nexport const stretch = (vector: Point, length: number): Point => [vector[0] * length, vector[1] * length];\r\n\r\nexport const add = (origin: Point, vector: Point): Point => [origin[0] + vector[0], origin[1] + vector[1]];\r\n\r\nexport const subtract = (origin: Point, vector: Point): Point => [origin[0] - vector[0], origin[1] - vector[1]];\r\n\r\nexport const relative = (origin: Point, to: Point): Point => [to[0] - origin[0], to[1] - origin[1]];\r\n\r\nexport const invert = (vector: Point): Point => [-vector[0], -vector[1]];\r\n\r\nexport const fromPolar = (magnitude: number, dir: number): Point => [Math.cos(dir) * magnitude, Math.sin(dir) * magnitude];\r\n\r\nexport const dot = (one: Point, other: Point): number => one[0] * other[0] + one[1] * other[1];\r\n\r\nexport const intersection = (a: [Point, Point], b: [Point, Point]): number | null => {\r\n\r\n    const vectorA = subtract(a[1], a[0]);\r\n    const vectorB = subtract(b[1], b[0]);\r\n    const diff = subtract(a[0], b[0]);\r\n\r\n    const ua_t = vectorB[0] * diff[1] - vectorB[1] * diff[0];\r\n    const ub_t = vectorA[0] * diff[1] - vectorA[1] * diff[0];\r\n    var u_b = vectorB[1] * vectorA[0] - vectorB[0] * vectorA[1];\r\n\r\n    if (u_b !== 0) {\r\n        const ua = ua_t / u_b;\r\n        const ub = ub_t / u_b;\r\n\r\n        console.log(`a: ${JSON.stringify(a)}, b: ${JSON.stringify(b)}, ua: ${ua}, ub: ${ub}`);\r\n\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n            return ua;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\ndeclare const window: any;\r\n\r\nwindow.test = intersection;","import { Scene, SceneArea, SceneObject } from \"./Scene\";\r\nimport { Texture } from \"./Textures\";\r\nimport { lineLength, Point, stretch, subtract } from \"./Vector\";\r\n\r\nexport const drawScene = (context: CanvasRenderingContext2D, textures: Record<string, Texture>, scene: Scene, debug?: boolean) => {\r\n\r\n    const globalScale: Point = [context.canvas.width / scene.size[0], context.canvas.height / scene.size[1]];\r\n\r\n    const reset = () => {\r\n        context.setTransform(new DOMMatrix());\r\n        context.shadowOffsetX = 0;\r\n        context.shadowOffsetY = 0;\r\n        context.shadowColor = '';\r\n        context.shadowBlur = 0;\r\n        context.fillStyle = '';\r\n        context.strokeStyle = '';\r\n        context.scale(...globalScale);\r\n    }\r\n\r\n    const debugPoint = (point: Point, style: string = '#0ff') => {\r\n        reset();\r\n        context.beginPath();\r\n        context.moveTo(...point);\r\n        context.strokeStyle = style;\r\n        context.fillStyle = style;\r\n        context.arc(...point, 2 / globalScale[0], 0, 2 * Math.PI);\r\n        context.fill();\r\n        context.closePath();\r\n    }\r\n\r\n\r\n    const sceneArea = (shape: SceneArea) => {\r\n        reset();\r\n\r\n        const texture = textures[shape.texture.name];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...shape.vertices[0]);\r\n        shape.vertices.slice(1).forEach(vertex => {\r\n            context.lineTo(...vertex);\r\n        });\r\n        context.closePath();\r\n\r\n\r\n\r\n        //edge shade\r\n        context.shadowColor = 'rgba(30, 30, 30, .9)';\r\n        context.shadowOffsetX = 0;\r\n        context.shadowOffsetY = 0;\r\n        context.shadowBlur = scene.edgeShade ?? 0;\r\n\r\n        context.rotate(shape.texture.rotate ?? 0);\r\n        const textureScale = texture.scale * (shape.texture.scale || 1);\r\n\r\n        if (shape.stretch) {\r\n            context.translate(...shape.vertices[0]);\r\n\r\n            const vector: Point = subtract(shape.vertices[1], shape.vertices[0]);\r\n\r\n            const stretchWidth = lineLength(vector);\r\n            const stretchHeight = lineLength(subtract(shape.vertices[2], shape.vertices[1]));\r\n\r\n            const angle = Math.atan2(vector[1], vector[0]);\r\n            context.rotate(angle);\r\n\r\n            const imageScale: Point = [textureScale / texture.loadedImage.width, textureScale / texture.loadedImage.height];\r\n            //const imageScale: Point = [textureScale / Math.max(texture.loadedImage.width, texture.loadedImage.height), textureScale / Math.max(texture.loadedImage.width, texture.loadedImage.height)];\r\n            context.scale(...imageScale);\r\n            context.scale(stretchWidth, stretchHeight);\r\n            context.scale(1.2, 1.2)\r\n            context.drawImage(texture.loadedImage, - texture.loadedImage.width / 10, - texture.loadedImage.height / 10);\r\n        } else {\r\n            const imageScale: Point = [textureScale / texture.loadedImage.width, textureScale / texture.loadedImage.height];\r\n            context.scale(...imageScale);\r\n\r\n            context.fillStyle = context.createPattern(texture.loadedImage, 'repeat') || '#c0c';\r\n            context.fill();\r\n        }\r\n\r\n\r\n        if (debug) {\r\n            context.strokeStyle = 'rgba(255, 255, 0, 1)';\r\n            context.lineWidth = 20;\r\n            context.stroke();\r\n        }\r\n    }\r\n\r\n    const sceneObject = (shape: SceneObject, shadowDirection: Point) => {\r\n        reset();\r\n        const texture = textures[shape.texture.name];\r\n        const textureScale = texture.scale * (shape.texture.scale || 1);\r\n\r\n        context.moveTo(...shape.origin);\r\n\r\n        context.translate(...shape.origin);\r\n        context.rotate((shape.texture.rotate ?? 0) + shape.orientation);\r\n\r\n        const imageScale: Point = [textureScale / texture.loadedImage.naturalWidth, textureScale / texture.loadedImage.naturalHeight];\r\n\r\n        context.scale(...imageScale);\r\n\r\n        //TODO: debug why this fucks up everything\r\n        // context.fillStyle = '#cfc';\r\n        // context.fill();\r\n\r\n        const shadowVector = stretch(shadowDirection, shape.height ?? 0);\r\n        context.shadowColor = 'rgba(30, 30, 30, .9)';\r\n        context.shadowOffsetX = shadowVector[0];\r\n        context.shadowOffsetY = shadowVector[1];\r\n        context.shadowBlur = 2;\r\n\r\n        context.drawImage(texture.loadedImage, -texture.loadedImage.naturalWidth / 2, -texture.loadedImage.naturalHeight / 2);\r\n\r\n        if (debug) {\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n            // fix this\r\n            // context.fillStyle = 'rgba(0, 0, 255, .2)';\r\n            // context.fillRect(-1 / 2, -1 / 2, 1, 1);\r\n            debugPoint(shape.origin);\r\n            context.arc(...shape.origin, shape.radius, 0, Math.PI * 2);\r\n            context.fillStyle = 'rgba(255, 0, 0, .2)';\r\n            context.fill();\r\n        }\r\n    }\r\n\r\n\r\n    const drawScene = () => {\r\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n        console.log(scene);\r\n        Object.values(scene.layers).forEach(layer => {\r\n            layer.areas?.sort((a, b) => (a.stretch ? 1 : 0) - (b.stretch ? 1 : 0)).forEach(sceneArea);\r\n            layer.objects?.forEach(ob => sceneObject(ob, scene.shadowVector));\r\n        });\r\n        if (scene.tint && scene.tint !== 'none') {\r\n            reset();\r\n            context.fillStyle = scene.tint;\r\n            context.setTransform(new DOMMatrix());\r\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n        }\r\n        reset();\r\n        context.setTransform(new DOMMatrix());\r\n        context.beginPath();\r\n        for (let x = 0; x < scene.size[0]; x++) {\r\n            context.moveTo(globalScale[0] * x, 0);\r\n            context.lineTo(globalScale[0] * x, context.canvas.height);\r\n        }\r\n        for (let y = 0; y < scene.size[1]; y++) {\r\n            context.moveTo(0, y * globalScale[1]);\r\n            context.lineTo(context.canvas.width, y * globalScale[1]);\r\n        }\r\n        context.strokeStyle = 'black';\r\n        context.lineWidth = 1;\r\n        context.stroke();\r\n    }\r\n\r\n    drawScene();\r\n}","export const randomInt = (max: number) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nexport const randomPlusMinus = (max: number) => {\r\n    return randomBetween(-max, max);\r\n}\r\n\r\nexport const randomBetween = (from: number, to: number) => {\r\n    return from + Math.random() * (to - from);\r\n}","import { randomBetween, randomInt, randomPlusMinus } from \"../Random\";\r\nimport { SceneArea, SceneTexture } from \"../Scene\";\r\nimport { Point, lineLength, lineNormal, add, stretch, invert, relative, intersection, subtract } from \"../Vector\";\r\n\r\nconst SPLIT_MIN = 0.2;\r\nconst SPLIT_MAX = 0.8;\r\nconst BENDINESS = 1 / 10;\r\nconst SPLITS = 1000;\r\nconst MINIMUM_SPLIT_LENGTH = 0.01;\r\n\r\nconst splitLine = (from: Point, to: Point): Point | null => {\r\n    const splitRatio = randomBetween(SPLIT_MIN, SPLIT_MAX);\r\n    const length = lineLength(from, to);\r\n    if (length < MINIMUM_SPLIT_LENGTH) {\r\n        return null;\r\n    }\r\n    const lineVector = relative(from, to);\r\n    const splitPoint = add(from, stretch(lineVector, splitRatio));\r\n\r\n    const normal = lineNormal(from, to);\r\n    const perturbation = stretch(normal, randomPlusMinus(length * BENDINESS));\r\n\r\n    return add(splitPoint, perturbation);\r\n}\r\n\r\nconst intersect = (line: [Point, Point], area: SceneArea): Array<number> => {\r\n    const ret: Array<number> = [];\r\n    for (let i = 0; i < area.vertices.length; i++) {\r\n        const p1 = area.vertices[i];\r\n        const p2 = area.vertices[(i + 1) % area.vertices.length];\r\n        const fraction = intersection(line, [p1, p2]);\r\n        if (fraction !== null) {\r\n            ret.push(fraction);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst createRectangle = (from: Point, to: Point, width: number, texture: SceneTexture): SceneArea => {\r\n    const widthAdjustment = stretch(lineNormal(from, to), width / 2);\r\n    const centerline: Array<Point> = [from, to];\r\n    const topLine: Array<Point> = centerline.map(vertex => add(vertex, invert(widthAdjustment)));\r\n    const bottomLine: Array<Point> = centerline.reverse().map(vertex => add(vertex, widthAdjustment));\r\n    return {\r\n        vertices: [...topLine, ...bottomLine],\r\n        texture,\r\n        stretch: true\r\n    };\r\n}\r\n\r\nconst generateRoad = (from: Point, to: Point, width: number, texture: SceneTexture, bridgeTexture?: SceneTexture, river?: SceneArea): Array<SceneArea> => {\r\n    const widthAdjustment = stretch(lineNormal(from, to), width / 2);\r\n\r\n    const centerline: Array<Point> = [from, to];\r\n\r\n    if (river && bridgeTexture) {\r\n        const intersectionPoints = intersect(centerline as [Point, Point], river);\r\n        intersectionPoints.sort((a, b) => a - b);\r\n        if (intersectionPoints.length === 2) {\r\n            const bridge1 = add(from, stretch(subtract(to, from), intersectionPoints[0]));\r\n            const bridge2 = add(from, stretch(subtract(to, from), intersectionPoints[1]));\r\n            return [\r\n                ...generateRoad(from, bridge1, width, texture),\r\n                ...generateRoad(bridge2, to, width, texture),\r\n                createRectangle(bridge1, bridge2, width, bridgeTexture)\r\n            ];\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < SPLITS; i++) {\r\n        const idx = randomInt(centerline.length - 1) + 1;\r\n        const split = splitLine(centerline[idx - 1], centerline[idx]);\r\n        if (split) {\r\n            centerline.splice(idx, 0, split);\r\n        }\r\n    }\r\n\r\n    const topLine: Array<Point> = centerline.map(vertex => add(vertex, invert(widthAdjustment)));\r\n    const bottomLine: Array<Point> = centerline.reverse().map(vertex => add(vertex, widthAdjustment));\r\n    return [{\r\n        vertices: [...topLine, ...bottomLine],\r\n        texture\r\n    }];\r\n}\r\n\r\nconst generateRoads = (endpoints: Array<{ from: Point, width: number }>, texture: SceneTexture, bridgeTexture?: SceneTexture, river?: SceneArea): Array<SceneArea> => {\r\n    if (endpoints.length > 2) {\r\n        const midpoint = endpoints.reduce((acc, curr) => [acc[0] + curr.from[0] / endpoints.length, acc[1] + curr.from[1] / endpoints.length] as Point, [0, 0] as Point);\r\n        return endpoints.flatMap(ep => generateRoad(ep.from, midpoint, ep.width, texture, bridgeTexture, river));\r\n    } else {\r\n        return generateRoad(endpoints[0].from, endpoints[1].from, endpoints[0].width, texture, bridgeTexture, river);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const Road = {\r\n    generate: generateRoads,\r\n}\r\n\r\n\r\n","import { randomBetween } from \"../Random\";\r\nimport { SceneArea, SceneObject, SceneTexture } from \"../Scene\";\r\nimport { Point, lineLength } from \"../Vector\";\r\n\r\ndeclare const OffscreenCanvas: any;\r\n\r\nconst MAX_TRIES = 1000;\r\n\r\nconst placeObject = (dim: Point, avoid: Array<SceneObject>, radius: number, tries: number): Point | null => {\r\n    let tried = 0;\r\n    while (tried++ < tries) {\r\n        const candidate: Point = [randomBetween(0, dim[0]), randomBetween(0, dim[1])];\r\n        const farEnough = avoid.every(ob => lineLength(ob.origin, candidate) > radius + ob.radius);\r\n        console.log('candidate', JSON.stringify(candidate), radius);\r\n        if (farEnough) {\r\n            return candidate;\r\n        }\r\n        console.log('too close to ', JSON.stringify(avoid.filter(ob => lineLength(ob.origin, candidate) <= radius + ob.radius)));\r\n    }\r\n    return null;\r\n}\r\n\r\nconst spreadObjects = (dim: Point, avoid: Array<SceneObject>, count: number, height: number, radius: number, texture: SceneTexture): Array<SceneObject> => {\r\n\r\n    let ret: Array<SceneObject> = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        const newPoint = placeObject(dim, ret.concat(avoid), radius, MAX_TRIES);\r\n        if (newPoint === null) {\r\n            console.warn(`stopped object generation at ${i}, too many tries`);\r\n            break;\r\n        }\r\n        ret.push({\r\n            origin: newPoint,\r\n            orientation: randomBetween(0, 2 * Math.PI),\r\n            height,\r\n            radius,\r\n            texture\r\n        });\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst inShapeFactory = (shape: SceneArea): ((point: Point) => boolean) => {\r\n\r\n    const canvas = new OffscreenCanvas(1, 1);\r\n    const context = canvas.getContext('2d') as unknown as CanvasRenderingContext2D;\r\n\r\n    const path: Path2D = new Path2D();\r\n    path.moveTo(...shape.vertices[0]);\r\n    shape.vertices.slice(1).forEach(vertex => {\r\n        path.lineTo(...vertex);\r\n    });\r\n    path.closePath();\r\n    return point => context.isPointInPath(path, ...point);\r\n}\r\n\r\nexport const SceneObjects = {\r\n    generate: (dim: Point, avoid: Array<SceneObject>, count: number, height: number, radius: number, texture: SceneTexture, exclude: Array<SceneArea> = []): Array<SceneObject> => {\r\n        const shapeChecker = exclude.map(inShapeFactory);\r\n\r\n        return spreadObjects(dim, avoid, count, height, radius, texture).filter(ob => shapeChecker.every(sc => !sc(ob.origin)));\r\n    }\r\n\r\n}","import { randomBetween, randomInt } from \"./Random\";\r\nimport { Scene, SceneArea, SceneObject, SceneTexture } from \"./Scene\";\r\nimport { Point } from \"./Vector\";\r\nimport { Road } from \"./generators/Road\";\r\nimport { SceneObjects } from \"./generators/SceneObjects\";\r\nimport { Texture } from \"./Textures\";\r\n\r\n\r\nconst ROAD_EDGE_OVERHANG = 2;\r\n\r\nconst randomEdgePoint = (dim: Point): Point => {\r\n    const side = randomInt(4);\r\n    const chosenDim = dim[side % 2]; // width if side is even, height if side is odd;\r\n    const pos = randomBetween(chosenDim * 0.1, chosenDim * 0.9);\r\n\r\n    switch (side) {\r\n        case 0: return [pos, -ROAD_EDGE_OVERHANG];\r\n        case 1: return [dim[0] + ROAD_EDGE_OVERHANG, pos];\r\n        case 2: return [pos, dim[1] + ROAD_EDGE_OVERHANG];\r\n        case 3: return [-ROAD_EDGE_OVERHANG, pos];\r\n        default: throw new Error('randomInt(4) returned a weird value');\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const SceneGenerator = {\r\n    create: (dim: Point, baseTexture: string): Scene => ({\r\n        layers: {\r\n            base: {\r\n                areas: [{\r\n                    vertices: [[0, 0], [dim[0], 0], dim, [0, dim[1]]],\r\n                    texture: {\r\n                        name: baseTexture,\r\n                    },\r\n                }],\r\n                type: 'base'\r\n            }\r\n        },\r\n        shadowVector: [0, 0],\r\n        size: dim\r\n    }),\r\n    river: (scene: Scene, layer: string, mainWidth: number, texture: Texture): Scene => {\r\n        const dim = scene.size;\r\n\r\n        const mainEndpoints: Array<{ from: Point, width: number }> = [\r\n            { from: [randomBetween(0.1 * dim[0], 0.9 * dim[0]), -ROAD_EDGE_OVERHANG], width: mainWidth },\r\n            { from: [randomBetween(0.1 * dim[0], 0.9 * dim[0]), dim[1] + ROAD_EDGE_OVERHANG], width: mainWidth }\r\n        ];\r\n\r\n        scene.layers[layer] = {\r\n            areas: Road.generate(mainEndpoints, {\r\n                name: texture.name\r\n            }),\r\n            type: 'river'\r\n        };\r\n\r\n        return scene;\r\n    },\r\n    roads: (scene: Scene, layer: string, mainWidth: number, sideRoads: Array<number>, texture: Texture, bridgeTexture?: Texture, river?: SceneArea): Scene => {\r\n        const dim = scene.size;\r\n\r\n        let mainEndpoints: Array<{ from: Point, width: number }> = [\r\n            { from: [-ROAD_EDGE_OVERHANG, randomBetween(0.1 * dim[1], 0.9 * dim[1])], width: mainWidth },\r\n            { from: [dim[0] + ROAD_EDGE_OVERHANG, randomBetween(0.1 * dim[1], 0.9 * dim[1])], width: mainWidth }\r\n        ];\r\n\r\n        const extraEndpoints = sideRoads.map(width => ({\r\n            from: randomEdgePoint(dim),\r\n            width: width\r\n        }));\r\n\r\n        const bridge: SceneTexture | undefined = bridgeTexture && {\r\n            name: bridgeTexture.name\r\n        };\r\n\r\n        scene.layers[layer] = {\r\n            areas: Road.generate([...mainEndpoints, ...extraEndpoints], {\r\n                name: texture.name\r\n            },\r\n                bridge,\r\n                river),\r\n            type: 'road'\r\n        };\r\n\r\n        return scene;\r\n    },\r\n    objects: (scene: Scene, layer: string, count: number, texture: Texture): Scene => {\r\n        const currentObjects: Array<SceneObject> = scene.layers[layer]?.objects ?? [];\r\n        const roadAreas: Array<SceneArea> = [...scene.layers.road.areas ?? [], ...scene.layers.river.areas ?? []];\r\n        const newObjects = SceneObjects.generate(scene.size, currentObjects, count, texture.height, texture.radius, {\r\n            name: texture.name,\r\n        }, roadAreas);\r\n        scene.layers[layer] = {\r\n            objects: currentObjects.concat(newObjects),\r\n            type: 'object'\r\n        }\r\n        return scene;\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gravel.fadd9e77.jpg\";","export default __webpack_public_path__ + \"static/media/grass.1bdb8368.jpg\";","export default __webpack_public_path__ + \"static/media/tree.251e1382.png\";","export default __webpack_public_path__ + \"static/media/tree2.b70d7e22.png\";","export default __webpack_public_path__ + \"static/media/rock.f8863753.png\";","export default __webpack_public_path__ + \"static/media/dirtroad.3f84b32a.jpg\";","export default __webpack_public_path__ + \"static/media/lightergrass.775fd4e3.jpg\";","export default __webpack_public_path__ + \"static/media/water.5bcc6117.jpg\";","export default __webpack_public_path__ + \"static/media/bridge.01e94610.png\";","export default __webpack_public_path__ + \"static/media/bridge2.c503a7ba.png\";","import React, { useEffect, useReducer } from 'react';\r\n\r\nimport gravel from './textures/gravel.jpg';\r\nimport grass from './textures/grass.jpg';\r\nimport tree from './textures/tree.png';\r\nimport tree2 from './textures/tree2.png';\r\nimport rock from './textures/rock.png';\r\nimport dirt from './textures/dirtroad.jpg';\r\nimport lighterGrass from './textures/lightergrass.jpg';\r\nimport water from './textures/water.jpg';\r\nimport bridge from './textures/bridge.png';\r\nimport bridge2 from './textures/bridge2.png';\r\n\r\nexport interface Texture {\r\n    name: string;\r\n    category: TextureCategory;\r\n    url: string;\r\n    type: 'single' | 'pattern';\r\n    scale: number;\r\n    height: number;\r\n    radius: number;\r\n    loadedImage: HTMLImageElement;\r\n}\r\n\r\nexport const TINTS: Record<string, string> = {\r\n    sunset: 'rgba(230,120,0,0.15)',\r\n    evening: 'rgba(0,0,250,0.2)',\r\n    night: 'rgba(0,0,250,0.3)',\r\n}\r\n\r\nexport type TextureCategory = 'ground' | 'river' | 'road' | 'bridge' | 'tree' | 'rock';\r\n\r\nexport const TEXTURES: Array<Omit<Texture, 'loadedImage'>> = [\r\n    {\r\n        name: 'water',\r\n        url: water,\r\n        type: 'pattern',\r\n        scale: 1,\r\n        category: 'river',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'bridge',\r\n        url: bridge,\r\n        type: 'pattern',\r\n        scale: 1,\r\n        category: 'bridge',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'straight bridge',\r\n        url: bridge2,\r\n        type: 'pattern',\r\n        scale: 1,\r\n        category: 'bridge',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'gravel',\r\n        url: gravel,\r\n        type: 'pattern',\r\n        scale: 1,\r\n        category: 'road',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'dirt',\r\n        url: dirt,\r\n        type: 'pattern',\r\n        scale: 1,\r\n        category: 'road',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'grass',\r\n        url: grass,\r\n        type: 'pattern',\r\n        scale: 3,\r\n        category: 'ground',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'lighter grass',\r\n        url: lighterGrass,\r\n        type: 'pattern',\r\n        scale: 1,\r\n        category: 'ground',\r\n        height: 0,\r\n        radius: 0,\r\n    },\r\n    {\r\n        name: 'tree',\r\n        url: tree,\r\n        type: 'single',\r\n        scale: 2,\r\n        category: 'tree',\r\n        height: 8,\r\n        radius: 1,\r\n    },\r\n    {\r\n        name: 'bigtree',\r\n        url: tree,\r\n        type: 'single',\r\n        scale: 4,\r\n        category: 'tree',\r\n        height: 16,\r\n        radius: 2,\r\n    },\r\n    {\r\n        name: 'other tree',\r\n        url: tree2,\r\n        type: 'single',\r\n        scale: 3,\r\n        category: 'tree',\r\n        height: 12,\r\n        radius: 1.5,\r\n    },\r\n    {\r\n        name: 'rock',\r\n        url: rock,\r\n        type: 'single',\r\n        scale: 0.3,\r\n        category: 'rock',\r\n        height: 2,\r\n        radius: 0.25,\r\n    },\r\n]\r\n\r\nexport const Textures: React.FC<{ onLoaded: (textures: Array<Texture>) => unknown }> = ({ onLoaded }) => {\r\n\r\n    const [imagesLoaded, imageLoaded] = useReducer((prevstate: number, action: {}) => {\r\n        return prevstate + 1;\r\n    }, 0);\r\n\r\n    useEffect(() => {\r\n        if (imagesLoaded === TEXTURES.length) {\r\n            onLoaded(TEXTURES.map(t => ({ ...t, loadedImage: document.getElementById(t.name) as HTMLImageElement })));\r\n        }\r\n    }, [imagesLoaded, onLoaded]);\r\n\r\n    return <>\r\n        {TEXTURES.map(t => <img key={t.name} src={t.url} id={t.name} style={{ display: 'none' }} alt='' onLoad={imageLoaded} />)}\r\n    </>;\r\n}","import React from 'react';\r\nimport { Select } from 'semantic-ui-react';\r\nimport { Texture, TextureCategory } from './Textures';\r\n\r\nexport interface TextureSelectorProps {\r\n    textures: Record<string, Texture>,\r\n    type: 'single' | 'pattern',\r\n    category?: TextureCategory,\r\n    value: string,\r\n    onChange: (name: string) => unknown,\r\n}\r\n\r\nexport const TextureSelector: React.FC<TextureSelectorProps> = ({ textures, type, category, value, onChange }) => {\r\n    return <Select\r\n        value={value}\r\n        onChange={(_, { value }) => onChange(value as string)}\r\n        placeholder='Select texture'\r\n        options={\r\n            Object.keys(textures)\r\n                .filter(t => textures[t].type === type)\r\n                .filter(t => !category || (textures[t].category === category))\r\n                .map(t => ({ key: t, text: t, value: t, image: textures[t].url }))\r\n        }\r\n    />\r\n}","import React, { useState } from 'react';\r\nimport { Button, ButtonGroup, Card, Header, Input } from 'semantic-ui-react';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\n\r\nexport interface ObjectLayerCardProps {\r\n    name: string;\r\n    textures: Record<string, Texture>;\r\n    generateObjects: (count: number, texture: string) => unknown;\r\n    clearLayer: () => unknown;\r\n    deleteLayer: () => unknown;\r\n}\r\n\r\n\r\nexport const ObjectLayerCard: React.FC<ObjectLayerCardProps> = ({ name, textures, generateObjects, clearLayer, deleteLayer }) => {\r\n    const [count, setCount] = useState<number>(0);\r\n    const [texture, setTexture] = useState<string>('');\r\n\r\n    return <Card>\r\n        <Card.Header><Header textAlign='center'>Object layer: {name}</Header></Card.Header>\r\n        <Card.Content>\r\n            <Input type='number' label='No. of objects:' value={count} step={1} onChange={e => setCount(Number(e.target.value))} />\r\n            <TextureSelector value={texture} textures={textures ?? {}} type='single' onChange={setTexture} />\r\n            <ButtonGroup>\r\n                <Button content='Add' icon='plus' disabled={count === 0 || texture === ''} onClick={() => generateObjects(count, texture)} />\r\n                <Button content='Clear' icon='eraser' onClick={clearLayer} />\r\n                <Button content='Remove' icon='remove' onClick={deleteLayer} />\r\n            </ButtonGroup>\r\n        </Card.Content>\r\n    </Card>\r\n}","import React, { useState } from 'react';\r\nimport { Button, Card, Header, Input } from 'semantic-ui-react';\r\n\r\nexport interface CreateLayerCardProps {\r\n    layers: Array<string>;\r\n    onCreate: (name: string) => unknown;\r\n}\r\n\r\n\r\nexport const CreateLayerCard: React.FC<CreateLayerCardProps> = ({ layers, onCreate }) => {\r\n    const [name, setName] = useState<string>('');\r\n\r\n    return <Card>\r\n        <Card.Header><Header textAlign='center'>Add new layer</Header></Card.Header>\r\n        <Card.Content>\r\n            <Input label='Layer name' value={name} onChange={e => setName(e.target.value)} />\r\n            <Button\r\n                icon='clone outline'\r\n                content='Create'\r\n                disabled={name === '' || layers.includes(name)}\r\n                onClick={() => {\r\n                    onCreate(name);\r\n                    setName('');\r\n                }} />\r\n        </Card.Content>\r\n    </Card>\r\n}","import { range } from 'lodash';\r\nimport React from 'react';\r\nimport { Button, List, SemanticICONS } from 'semantic-ui-react';\r\n\r\nexport interface ListComponentProps {\r\n    items: number;\r\n    itemFactory: (index: number) => JSX.Element;\r\n    addItem: () => unknown;\r\n    removeItem: (index: number) => unknown;\r\n    itemIcon?: SemanticICONS;\r\n    name: string;\r\n}\r\n\r\nexport const ListComponent: React.FC<ListComponentProps> = ({ items, itemFactory, addItem, removeItem, itemIcon, name }) => {\r\n    return <List divided relaxed>\r\n        {range(0, items).map(index => <List.Item>\r\n            {itemIcon && <List.Icon name={itemIcon} />}\r\n            <List.Content>\r\n                {itemFactory(index)} <Button floated='right' icon='remove' onClick={() => removeItem(index)} />\r\n            </List.Content>\r\n        </List.Item>)}\r\n        <List.Item>\r\n            <List.Content>\r\n                <Button icon='plus' content={`Add ${name}`} onClick={addItem} />\r\n            </List.Content>\r\n        </List.Item>\r\n    </List>;\r\n}","import React, { useState } from 'react';\r\nimport { Button, Card, Header, Input } from 'semantic-ui-react';\r\nimport { ListComponent } from './ListComponent';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\n\r\nexport interface RoadLayerCardProps {\r\n    name: string;\r\n    textures: Record<string, Texture>;\r\n    sceneHasRiver: boolean;\r\n    generateRoads: (mainWidth: number, sideRoads: Array<number>, texture: string, bridgeTexture?: string) => unknown;\r\n}\r\n\r\n\r\nexport const RoadLayerCard: React.FC<RoadLayerCardProps> = ({ name, textures, generateRoads, sceneHasRiver }) => {\r\n    const [mainWidth, setMainWidth] = useState<number>(0);\r\n    const [texture, setTexture] = useState<string>('');\r\n    const [bridgeTexture, setBridgeTexture] = useState<string>('');\r\n    const [sideRoads, setSideRoads] = useState<Array<number>>([]);\r\n\r\n    return <Card>\r\n        <Card.Header><Header textAlign='center'>Road Layer</Header></Card.Header>\r\n        <Card.Content>\r\n            <Input label='Main road width:' type='number' value={mainWidth} onChange={e => setMainWidth(Number(e.target.value))} />\r\n            <TextureSelector value={texture} textures={textures ?? {}} category='road' type='pattern' onChange={setTexture} />\r\n            {sceneHasRiver && <TextureSelector value={bridgeTexture} textures={textures ?? {}} category='bridge' type='pattern' onChange={setBridgeTexture} />}\r\n            <ListComponent\r\n                items={sideRoads.length}\r\n                name='side road'\r\n                itemIcon='road'\r\n                addItem={() => {\r\n                    setSideRoads([...sideRoads, 0]);\r\n                }}\r\n                removeItem={index => {\r\n                    sideRoads.splice(index, 1);\r\n                    setSideRoads([...sideRoads]);\r\n                }}\r\n                itemFactory={index => <Input label='Side road width:' type='number' value={sideRoads[index]} onChange={e => { sideRoads[index] = Number(e.target.value); setSideRoads([...sideRoads]); }} />} />\r\n            <Button icon='redo' content='Generate' disabled={texture === ''} onClick={() => generateRoads(mainWidth, sideRoads, texture, bridgeTexture)} />\r\n        </Card.Content>\r\n    </Card>\r\n}","import React from 'react';\r\nimport { Card, Header, Input, Select } from 'semantic-ui-react';\r\nimport { TINTS } from './Textures';\r\nimport { fromPolar, lineLength, Point } from './Vector';\r\n\r\nexport interface VisualsCardProps {\r\n    shadowVector: Point;\r\n    onShadowChange: (shadowVector: Point) => unknown;\r\n    tint: string;\r\n    onTintChange: (tint: string) => unknown;\r\n    resolution: number;\r\n    onResolutionChange: (resolution: number) => unknown;\r\n    edgeShade?: number;\r\n    onEdgeShadeChange: (edgeShade: number) => unknown;\r\n}\r\n\r\n\r\nexport const VisualsCard: React.FC<VisualsCardProps> = ({ tint, shadowVector, onShadowChange, onTintChange, resolution, onResolutionChange, edgeShade, onEdgeShadeChange }) => {\r\n    const shadowLength = Math.round(lineLength(shadowVector) * 10);\r\n    const shadowAngle = Math.round(Math.atan2(shadowVector[1], shadowVector[0]) * 180 / Math.PI);\r\n    return <Card>\r\n        <Card.Header><Header textAlign='center'>Visual tweaks</Header></Card.Header>\r\n        <Card.Content>\r\n            <Select value={tint || 'none'} onChange={(_, { value }) => onTintChange(value as string)} options={\r\n                [{ key: '', value: 'none', text: 'no tint' }, ...Object.keys(TINTS).map(t => ({ key: t, value: TINTS[t], text: t }))]\r\n            } />\r\n            <br />\r\n            <Input label='Shadow length' type='number' value={shadowLength} onChange={e => onShadowChange(fromPolar(Number(e.target.value) / 10, Number(shadowAngle) * Math.PI / 180))} />\r\n            <Input label='Shadow direction' type='number' step={5} value={shadowAngle} onChange={e => onShadowChange(fromPolar(shadowLength / 10, Number(e.target.value) * Math.PI / 180))} />\r\n            <Input label='Edge shade' type='number' step={5} value={edgeShade} onChange={e => onEdgeShadeChange(Number(e.target.value))} />\r\n            <Input label='Pixels per grid' type='number' step={5} value={resolution} onChange={e => onResolutionChange(Number(e.target.value))} />\r\n        </Card.Content>\r\n    </Card>\r\n}","import React, { useState } from 'react';\r\nimport { Button, Card, Header, Input } from 'semantic-ui-react';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\nimport { Point } from './Vector';\r\n\r\ninterface BaseLayerCardProps {\r\n    textures: Record<string, Texture>;\r\n    createScene: (dimensions: Point, baseTexture: string) => unknown;\r\n}\r\n\r\nexport const BaseLayerCard: React.FC<BaseLayerCardProps> = ({ textures, createScene }) => {\r\n\r\n    const [texture, setTexture] = useState<string>('');\r\n    const [width, setWidth] = useState<number>(10);\r\n    const [height, setHeight] = useState<number>(10);\r\n\r\n    return <Card>\r\n        <Card.Header><Header textAlign='center'>Scene</Header></Card.Header>\r\n        <Card.Content>\r\n            <Input type='number' label='Width' value={width} step={20} onChange={e => setWidth(Number(e.target.value))} />\r\n            <Input type='number' label='Height' value={height} step={20} onChange={e => setHeight(Number(e.target.value))} />\r\n            <TextureSelector value={texture} textures={textures ?? {}} type='pattern' category='ground' onChange={setTexture} />\r\n\r\n            <Button\r\n                icon='clone outline'\r\n                content='Create'\r\n                disabled={texture === ''}\r\n                onClick={() => createScene([width, height], texture)} />\r\n        </Card.Content>\r\n    </Card>\r\n}","import React, { useState } from 'react';\r\nimport { Button, Card, Header, Input } from 'semantic-ui-react';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\n\r\nexport interface RiverLayerCardProps {\r\n    name: string;\r\n    textures: Record<string, Texture>;\r\n    generateRiver: (mainWidth: number, texture: string) => unknown;\r\n}\r\n\r\n\r\nexport const RiverLayerCard: React.FC<RiverLayerCardProps> = ({ name, textures, generateRiver }) => {\r\n    const [mainWidth, setMainWidth] = useState<number>(0);\r\n    const [texture, setTexture] = useState<string>('');\r\n\r\n    return <Card>\r\n        <Card.Header><Header textAlign='center'>River Layer</Header></Card.Header>\r\n        <Card.Content>\r\n            <Input label='River width:' type='number' value={mainWidth} onChange={e => setMainWidth(Number(e.target.value))} />\r\n            <TextureSelector value={texture} textures={textures ?? {}} category='river' type='pattern' onChange={setTexture} />\r\n            <Button icon='redo' content='Generate' disabled={texture === ''} onClick={() => generateRiver(mainWidth, texture)} />\r\n        </Card.Content>\r\n    </Card>\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { drawScene } from './ShapeDrawer';\r\nimport { SceneGenerator } from './SceneGenerator';\r\nimport { Point } from './Vector';\r\nimport { Texture, Textures } from './Textures';\r\nimport { Scene } from './Scene';\r\nimport { ObjectLayerCard } from './ObjectLayerCard';\r\nimport { CreateLayerCard } from './CreateLayerCard';\r\nimport { RoadLayerCard } from './RoadLayerCard';\r\nimport { Card, Checkbox } from 'semantic-ui-react';\r\nimport { VisualsCard } from './VisualsCard';\r\nimport { BaseLayerCard } from './BaseLayerCard';\r\nimport { RiverLayerCard } from './RiverLayerCard';\r\n\r\nconst SCALE = 70;\r\n\r\nexport const Canvas: React.FC<{}> = () => {\r\n\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [textures, setTeztures] = useState<Record<string, Texture>>();\r\n    const [scene, setScene] = useState<Scene>(SceneGenerator.create([10, 10], 'grass'));\r\n    const [resolution, setResolution] = useState<number>(SCALE);\r\n    const [debug, setDebug] = useState<boolean>(false);\r\n\r\n    const regenerateRoads = useCallback((layer: string, mainWidth: number, sideRoads: Array<number>, texture: string, bridgeTexture?: string) => {\r\n        if (textures) {\r\n            setScene({ ...SceneGenerator.roads(scene, layer, mainWidth, sideRoads, textures[texture], textures[bridgeTexture ?? ''], scene.layers.river?.areas?.[0]) });\r\n        }\r\n    }, [scene, textures]);\r\n\r\n    const regenerateRiver = useCallback((layer: string, mainWidth: number, texture: string) => {\r\n        if (textures) {\r\n            setScene({ ...SceneGenerator.river(scene, layer, mainWidth, textures[texture]) });\r\n        }\r\n    }, [scene, textures]);\r\n\r\n\r\n    const clearLayer = useCallback((layer: string) => {\r\n        delete scene.layers?.[layer]?.areas;\r\n        delete scene.layers?.[layer]?.objects;\r\n        setScene({ ...scene });\r\n    }, [scene]);\r\n\r\n    const removeLayer = useCallback((layer: string) => {\r\n        delete scene.layers?.[layer];\r\n        setScene({ ...scene });\r\n    }, [scene]);\r\n\r\n    const createLayer = useCallback((layer: string) => {\r\n        scene.layers[layer] = { type: 'object' };\r\n        setScene({ ...scene });\r\n    }, [scene]);\r\n\r\n    const generateObjects = useCallback((layer: string, count: number, texture: string) => {\r\n        if (textures) {\r\n            SceneGenerator.objects(scene, layer, count, textures[texture]);\r\n        }\r\n        setScene({ ...scene });\r\n    }, [scene, textures]);\r\n\r\n    const createScene = useCallback((dimension: Point, texture: string) => {\r\n        setScene(SceneGenerator.create(dimension, texture));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (textures) {\r\n            const canvas = canvasRef.current;\r\n            if (canvas) {\r\n                const context = canvas.getContext('2d');\r\n                if (context) {\r\n                    drawScene(context, textures, scene, debug);\r\n                }\r\n            }\r\n        }\r\n    }, [textures, scene, resolution, debug]);\r\n\r\n    const onTexturesLoaded = useCallback((textures: Array<Texture>) => {\r\n        const textureMap: Record<string, Texture> = textures.reduce((acc, curr) => { acc[curr.name] = curr; return acc; }, {} as Record<string, Texture>);\r\n        setTeztures(textureMap);\r\n    }, []);\r\n\r\n    return <>\r\n        <Textures onLoaded={onTexturesLoaded} />\r\n        <div style={{ display: 'flex' }}>\r\n            <div>\r\n                <Card.Group itemsPerRow={1}>\r\n                    <BaseLayerCard textures={textures ?? {}} createScene={createScene} />\r\n                    <RiverLayerCard name='river' textures={textures ?? {}} generateRiver={regenerateRiver.bind(null, 'river')} />\r\n                    <RoadLayerCard name='road' sceneHasRiver={!!scene.layers.river} textures={textures ?? {}} generateRoads={regenerateRoads.bind(null, 'road')} />\r\n                    {Object.keys(scene.layers).filter(layer => scene.layers[layer].type === 'object').map(layer => {\r\n                        return <ObjectLayerCard\r\n                            name={layer}\r\n                            textures={textures ?? {}}\r\n                            generateObjects={(count, texture) => generateObjects(layer, count, texture)}\r\n                            clearLayer={() => clearLayer(layer)}\r\n                            deleteLayer={() => removeLayer(layer)}\r\n                        />\r\n                    })}\r\n                    {scene.layers.road && <CreateLayerCard layers={Object.keys(scene.layers)} onCreate={createLayer} />}\r\n\r\n                    <VisualsCard tint={scene.tint ?? ''} shadowVector={scene.shadowVector} onShadowChange={shadow => {\r\n                        scene.shadowVector = shadow;\r\n                        setScene({ ...scene });\r\n                    }}\r\n                        onTintChange={tint => {\r\n                            scene.tint = tint;\r\n                            setScene({ ...scene });\r\n                        }}\r\n                        resolution={resolution}\r\n                        onResolutionChange={setResolution}\r\n                        edgeShade={scene.edgeShade}\r\n                        onEdgeShadeChange={edgeShade => {\r\n                            scene.edgeShade = Math.max(0, edgeShade);\r\n                            setScene({ ...scene });\r\n                        }}\r\n                    />\r\n                    <Card>\r\n                        <Card.Content>\r\n                            <Checkbox label='Debug mode' checked={debug} onChange={(_, data) => setDebug(!debug)} toggle />\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Card.Group>\r\n\r\n            </div>\r\n            <canvas style={{ width: `${scene.size[0] * resolution}px`, height: `${scene.size[1] * resolution}px` }} ref={canvasRef} width={`${scene.size[0] * resolution}px`} height={`${scene.size[1] * resolution}px`} />\r\n        </div>\r\n    </>;\r\n}","import React from 'react';\nimport { Canvas } from './Canvas';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}