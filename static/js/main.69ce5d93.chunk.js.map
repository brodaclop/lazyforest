{"version":3,"sources":["Vector.tsx","ShapeDrawer.tsx","Random.tsx","generators/Road.tsx","generators/SceneObjects.tsx","SceneGenerator.tsx","textures/gravel.jpg","textures/grass.jpg","textures/tree.png","textures/tree2.png","textures/rock.png","textures/dirtroad.jpg","textures/lightergrass.jpg","textures/water.jpg","textures/bridge.png","textures/bridge2.png","textures/soil.jpg","textures/moss.jpg","textures/snow.jpg","textures/coarse-snow.jpg","textures/ice.jpg","Textures.tsx","DefinitionCard.tsx","NumberInput.tsx","TextureSelector.tsx","ObjectLayerCard.tsx","CreateLayerCard.tsx","ListComponent.tsx","RoadLayerCard.tsx","VisualsCard.tsx","BaseLayerCard.tsx","RiverLayerCard.tsx","Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lineLength","from","to","Math","sqrt","normalize","vector","len","lineNormal","stretch","length","add","origin","subtract","invert","fromPolar","magnitude","dir","cos","sin","intersection","a","b","vectorA","vectorB","diff","ua_t","ub_t","u_b","ua","ub","window","test","drawScene","context","textures","scene","debug","globalScale","canvas","width","size","height","reset","setTransform","DOMMatrix","shadowOffsetX","shadowOffsetY","shadowColor","shadowBlur","fillStyle","strokeStyle","scale","drawPath","vertices","beginPath","moveTo","slice","forEach","vertex","lineTo","closePath","sceneArea","shape","texture","edgeShade","translate","stretchWidth","stretchHeight","angle","atan2","rotate","imageScale","loadedImage","drawImage","save","createPattern","fill","restore","edge","edgeTexture","edgeScale","area","ret","i","p0","p1","p2","normal1","normal2","normal","push","splice","borderArea","lineWidth","stroke","sceneObject","shadowDirection","naturalWidth","naturalHeight","shadowVector","point","style","arc","PI","debugPoint","radius","clearRect","console","log","Object","values","layers","layer","areas","sort","objects","ob","tint","fillRect","x","y","randomInt","max","floor","random","randomBetween","splitLine","splitRatio","lineVector","relative","splitPoint","perturbation","createRectangle","widthAdjustment","centerline","topLine","map","bottomLine","reverse","generateRoad","bridgeTexture","river","intersectionPoints","line","fraction","intersect","bridge1","bridge2","idx","split","Road","endpoints","midpoint","reduce","acc","curr","flatMap","ep","placeObject","dim","avoid","tries","tried","candidate","every","spreadObjects","count","newPoint","concat","warn","orientation","inShapeFactory","OffscreenCanvas","getContext","path","Path2D","isPointInPath","SceneObjects","exclude","shapeChecker","filter","sc","randomEdgePoint","side","chosenDim","pos","Error","SceneGenerator","baseTexture","base","type","mainWidth","bankTexture","bankPercentage","bankOverhang","mainEndpoints","name","sideRoads","vergeTexture","vergePercentage","vergeOverhang","extraEndpoints","currentObjects","roadAreas","road","newObjects","TINTS","sunset","evening","night","TEXTURES","url","water","category","ice","bridge","gravel","dirt","grass","snow","coarseSnow","alphaMultiplier","lighterGrass","soil","moss","tree","tree2","rock","makeImageTransparent","image","offscreen","osContext","imageData","getImageData","data","set","putImageData","output","Image","convertToBlob","blob","src","URL","createObjectURL","Textures","onLoaded","useReducer","prevstate","action","imagesLoaded","imageLoaded","useEffect","loaded","t","document","getElementById","undefined","id","display","alt","onLoad","DefinitionCard","title","enabled","blocks","titleContent","Accordion","disabled","AccordionSummary","expandIcon","ExpandMore","Typography","AccordionDetails","block","Box","sx","m","borderTop","pt","content","NumberInput","value","min","step","label","onChange","FormControlLabel","labelPlacement","control","Slider","valueLabelDisplay","marks","_","TextureSelector","renderValue","marginRight","FormControl","InputLabel","Select","e","target","displayEmpty","selected","autoWidth","MenuItem","keys","ObjectLayerCard","generateObjects","clearLayer","deleteLayer","useState","setCount","setTexture","Button","startIcon","Add","onClick","stopPropagation","ClearAll","Delete","CreateLayerCard","onCreate","setName","TextField","variant","InputProps","endAdornment","InputAdornment","position","includes","ListComponent","items","itemFactory","addItem","removeItem","List","range","index","ListItem","IconButton","RoadLayerCard","generateRoads","sceneHasRiver","setMainWidth","setBridgeTexture","setSideRoads","setVergeTexture","setVergePercentage","setVergeOverhang","VisualsCard","onShadowChange","onTintChange","resolution","onResolutionChange","onEdgeShadeChange","shadowLength","round","shadowAngle","Number","BaseLayerCard","createScene","setWidth","setHeight","RiverLayerCard","generateRiver","setBankTexture","setBankPercentage","setBankOverhang","Canvas","canvasRef","useRef","setTeztures","setScene","setResolution","setDebug","regenerateRoads","useCallback","regenerateRiver","removeLayer","createLayer","dimension","current","onTexturesLoaded","textureMap","Stack","spacing","bind","shadow","Card","CardContent","Switch","checked","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.69ce5d93.chunk.js","sourcesContent":["export type Point = [number, number];\r\n\r\nexport const lineLength = (from: Point, to: Point = [0, 0]): number => Math.sqrt((from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]));\r\n\r\nexport const normalize = (vector: Point): Point => {\r\n    const len = lineLength([0, 0], vector);\r\n    return [vector[0] / len, vector[1] / len];\r\n}\r\n\r\nexport const lineNormal = (from: Point, to: Point): Point => normalize([from[1] - to[1], to[0] - from[0]]);\r\n\r\nexport const stretch = (vector: Point, length: number): Point => [vector[0] * length, vector[1] * length];\r\n\r\nexport const add = (origin: Point, vector: Point): Point => [origin[0] + vector[0], origin[1] + vector[1]];\r\n\r\nexport const subtract = (origin: Point, vector: Point): Point => [origin[0] - vector[0], origin[1] - vector[1]];\r\n\r\nexport const relative = (origin: Point, to: Point): Point => [to[0] - origin[0], to[1] - origin[1]];\r\n\r\nexport const invert = (vector: Point): Point => [-vector[0], -vector[1]];\r\n\r\nexport const fromPolar = (magnitude: number, dir: number): Point => [Math.cos(dir) * magnitude, Math.sin(dir) * magnitude];\r\n\r\nexport const dot = (one: Point, other: Point): number => one[0] * other[0] + one[1] * other[1];\r\n\r\nexport const intersection = (a: [Point, Point], b: [Point, Point]): number | null => {\r\n\r\n    const vectorA = subtract(a[1], a[0]);\r\n    const vectorB = subtract(b[1], b[0]);\r\n    const diff = subtract(a[0], b[0]);\r\n\r\n    const ua_t = vectorB[0] * diff[1] - vectorB[1] * diff[0];\r\n    const ub_t = vectorA[0] * diff[1] - vectorA[1] * diff[0];\r\n    var u_b = vectorB[1] * vectorA[0] - vectorB[0] * vectorA[1];\r\n\r\n    if (u_b !== 0) {\r\n        const ua = ua_t / u_b;\r\n        const ub = ub_t / u_b;\r\n\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n            return ua;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\ndeclare const window: any;\r\n\r\nwindow.test = intersection;","import { Scene, SceneArea, SceneObject } from \"./Scene\";\r\nimport { Texture } from \"./Textures\";\r\nimport { add, lineLength, lineNormal, normalize, Point, stretch, subtract } from \"./Vector\";\r\nexport const drawScene = (context: CanvasRenderingContext2D, textures: Record<string, Texture>, scene: Scene, debug?: boolean) => {\r\n\r\n    const globalScale: Point = [context.canvas.width / scene.size[0], context.canvas.height / scene.size[1]];\r\n\r\n    const borderArea = (area: SceneArea): Array<Point> => {\r\n        const ret: Array<Point> = [];\r\n        for (let i = 0; i < area.vertices.length; i++) {\r\n            const p0 = area.vertices[(i + area.vertices.length - 1) % area.vertices.length];\r\n            const p1 = area.vertices[i];\r\n            const p2 = area.vertices[(i + 1) % area.vertices.length];\r\n            const normal1 = lineNormal(p1, p2);\r\n            const normal2 = lineNormal(p0, p1);\r\n            const normal = normalize(add(normal1, normal2));\r\n            ret.push(add(p1, stretch(normal, area.edge?.width[0] ?? 0)));\r\n        }\r\n        for (let i = area.vertices.length - 1; i >= 0; i--) {\r\n            const p0 = area.vertices[(i + area.vertices.length - 1) % area.vertices.length];\r\n            const p1 = area.vertices[i];\r\n            const p2 = area.vertices[(i + 1) % area.vertices.length];\r\n            const normal1 = lineNormal(p1, p2);\r\n            const normal2 = lineNormal(p0, p1);\r\n            const normal = normalize(add(normal1, normal2));\r\n            ret.push(add(p1, stretch(normal, area.edge?.width[1] ?? 0)));\r\n        }\r\n        ret.splice(area.vertices.length, 0, ret[0], ret[ret.length - 1]);\r\n        return ret;\r\n    }\r\n\r\n    const reset = () => {\r\n        context.setTransform(new DOMMatrix());\r\n        context.shadowOffsetX = 0;\r\n        context.shadowOffsetY = 0;\r\n        context.shadowColor = '';\r\n        context.shadowBlur = 0;\r\n        context.fillStyle = '';\r\n        context.strokeStyle = '';\r\n        context.scale(...globalScale);\r\n    }\r\n\r\n    const debugPoint = (point: Point, style: string = '#0ff') => {\r\n        reset();\r\n        context.beginPath();\r\n        context.moveTo(...point);\r\n        context.strokeStyle = style;\r\n        context.fillStyle = style;\r\n        context.arc(...point, 2 / globalScale[0], 0, 2 * Math.PI);\r\n        context.fill();\r\n        context.closePath();\r\n    }\r\n\r\n    const drawPath = (vertices: Array<Point>): void => {\r\n        context.beginPath();\r\n        context.moveTo(...vertices[0]);\r\n        vertices.slice(1).forEach(vertex => {\r\n            context.lineTo(...vertex);\r\n        });\r\n        context.closePath();\r\n    }\r\n\r\n    const sceneArea = (shape: SceneArea) => {\r\n        reset();\r\n\r\n        const texture = textures[shape.texture];\r\n\r\n        drawPath(shape.vertices);\r\n\r\n\r\n        //edge shade\r\n        context.shadowColor = 'rgba(30, 30, 30, .5)';\r\n        context.shadowOffsetX = 0;\r\n        context.shadowOffsetY = 0;\r\n        context.shadowBlur = scene.edgeShade ?? 0;\r\n\r\n        if (shape.stretch) {\r\n            context.translate(...shape.vertices[0]);\r\n\r\n            const vector: Point = subtract(shape.vertices[1], shape.vertices[0]);\r\n\r\n            const stretchWidth = lineLength(vector);\r\n            const stretchHeight = lineLength(subtract(shape.vertices[2], shape.vertices[1]));\r\n\r\n            const angle = Math.atan2(vector[1], vector[0]);\r\n            context.rotate(angle);\r\n\r\n            const imageScale: Point = [texture.scale / texture.loadedImage.width, texture.scale / texture.loadedImage.height];\r\n            //const imageScale: Point = [textureScale / Math.max(texture.loadedImage.width, texture.loadedImage.height), textureScale / Math.max(texture.loadedImage.width, texture.loadedImage.height)];\r\n            context.scale(...imageScale);\r\n            context.scale(stretchWidth, stretchHeight);\r\n            context.scale(1.2, 1.2)\r\n            context.drawImage(texture.loadedImage, - texture.loadedImage.width / 10, - texture.loadedImage.height / 10);\r\n        } else {\r\n            const imageScale: Point = [texture.scale / texture.loadedImage.width, texture.scale / texture.loadedImage.height];\r\n            context.save();\r\n            context.scale(...imageScale);\r\n\r\n            context.fillStyle = context.createPattern(texture.loadedImage, 'repeat') || '#c0c';\r\n            context.fill();\r\n            context.restore();\r\n\r\n            if (shape.edge) {\r\n                const edgeTexture = textures[shape.edge.texture];\r\n                const edgeScale: Point = [edgeTexture.scale / edgeTexture.loadedImage.width, edgeTexture.scale / edgeTexture.loadedImage.height];\r\n                drawPath(borderArea(shape));\r\n                context.scale(...edgeScale);\r\n                context.fillStyle = context.createPattern(edgeTexture.loadedImage, 'repeat') || '#c0c';\r\n                context.fill();\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        if (debug) {\r\n            context.strokeStyle = 'rgba(255, 255, 0, 1)';\r\n            context.lineWidth = 20;\r\n            context.stroke();\r\n        }\r\n    }\r\n\r\n    const sceneObject = (shape: SceneObject, shadowDirection: Point) => {\r\n        reset();\r\n        const texture = textures[shape.texture];\r\n\r\n        context.moveTo(...shape.origin);\r\n\r\n        context.translate(...shape.origin);\r\n\r\n        const imageScale: Point = [texture.scale / texture.loadedImage.naturalWidth, texture.scale / texture.loadedImage.naturalHeight];\r\n\r\n        context.scale(...imageScale);\r\n\r\n        //TODO: debug why this fucks up everything\r\n        // context.fillStyle = '#cfc';\r\n        // context.fill();\r\n\r\n        const shadowVector = stretch(shadowDirection, shape.height ?? 0);\r\n        context.shadowColor = 'rgba(30, 30, 30, .8)';\r\n        context.shadowOffsetX = shadowVector[0];\r\n        context.shadowOffsetY = shadowVector[1];\r\n        context.shadowBlur = 2;\r\n\r\n        context.drawImage(texture.loadedImage, -texture.loadedImage.naturalWidth / 2, -texture.loadedImage.naturalHeight / 2);\r\n\r\n        if (debug) {\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n            // fix this\r\n            // context.fillStyle = 'rgba(0, 0, 255, .2)';\r\n            // context.fillRect(-1 / 2, -1 / 2, 1, 1);\r\n            debugPoint(shape.origin);\r\n            context.arc(...shape.origin, shape.radius, 0, Math.PI * 2);\r\n            context.fillStyle = 'rgba(255, 0, 0, .5)';\r\n            context.fill();\r\n        }\r\n    }\r\n\r\n\r\n    const drawScene = () => {\r\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n        console.log(scene);\r\n        Object.values(scene.layers).forEach(layer => {\r\n            layer.areas?.sort((a, b) => (a.stretch ? 1 : 0) - (b.stretch ? 1 : 0)).forEach(sceneArea);\r\n            layer.objects?.sort((a, b) => a.height - b.height).forEach(ob => sceneObject(ob, scene.shadowVector));\r\n        });\r\n        if (scene.tint && scene.tint !== 'none') {\r\n            reset();\r\n            context.fillStyle = scene.tint;\r\n            context.setTransform(new DOMMatrix());\r\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n        }\r\n        reset();\r\n        context.setTransform(new DOMMatrix());\r\n        context.beginPath();\r\n        for (let x = 0; x < scene.size[0]; x++) {\r\n            context.moveTo(globalScale[0] * x, 0);\r\n            context.lineTo(globalScale[0] * x, context.canvas.height);\r\n        }\r\n        for (let y = 0; y < scene.size[1]; y++) {\r\n            context.moveTo(0, y * globalScale[1]);\r\n            context.lineTo(context.canvas.width, y * globalScale[1]);\r\n        }\r\n        context.strokeStyle = 'black';\r\n        context.lineWidth = 1;\r\n        context.stroke();\r\n    }\r\n\r\n    drawScene();\r\n}","export const randomInt = (max: number) => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nexport const randomPlusMinus = (max: number) => {\r\n    return randomBetween(-max, max);\r\n}\r\n\r\nexport const randomBetween = (from: number, to: number) => {\r\n    return from + Math.random() * (to - from);\r\n}","import { randomBetween, randomInt, randomPlusMinus } from \"../Random\";\r\nimport { SceneArea } from \"../Scene\";\r\nimport { Point, lineLength, lineNormal, add, stretch, invert, relative, intersection, subtract } from \"../Vector\";\r\n\r\nconst SPLIT_MIN = 0.2;\r\nconst SPLIT_MAX = 0.8;\r\nconst BENDINESS = 1 / 10;\r\nconst SPLITS = 1000;\r\nconst MINIMUM_SPLIT_LENGTH = 0.01;\r\n\r\nconst splitLine = (from: Point, to: Point): Point | null => {\r\n    const splitRatio = randomBetween(SPLIT_MIN, SPLIT_MAX);\r\n    const length = lineLength(from, to);\r\n    if (length < MINIMUM_SPLIT_LENGTH) {\r\n        return null;\r\n    }\r\n    const lineVector = relative(from, to);\r\n    const splitPoint = add(from, stretch(lineVector, splitRatio));\r\n\r\n    const normal = lineNormal(from, to);\r\n    const perturbation = stretch(normal, randomPlusMinus(length * BENDINESS));\r\n\r\n    return add(splitPoint, perturbation);\r\n}\r\n\r\nconst intersect = (line: [Point, Point], area: SceneArea): Array<number> => {\r\n    const ret: Array<number> = [];\r\n    for (let i = 0; i < area.vertices.length; i++) {\r\n        const p1 = area.vertices[i];\r\n        const p2 = area.vertices[(i + 1) % area.vertices.length];\r\n        const fraction = intersection(line, [p1, p2]);\r\n        if (fraction !== null) {\r\n            ret.push(fraction);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst createRectangle = (from: Point, to: Point, width: number, texture: string): SceneArea => {\r\n    const widthAdjustment = stretch(lineNormal(from, to), width / 2);\r\n    const centerline: Array<Point> = [from, to];\r\n    const topLine: Array<Point> = centerline.map(vertex => add(vertex, invert(widthAdjustment)));\r\n    const bottomLine: Array<Point> = centerline.reverse().map(vertex => add(vertex, widthAdjustment));\r\n    return {\r\n        vertices: [...topLine, ...bottomLine],\r\n        texture,\r\n        stretch: true\r\n    };\r\n}\r\n\r\nconst generateRoad = (from: Point, to: Point, width: number, texture: string, bridgeTexture?: string, river?: SceneArea): Array<SceneArea> => {\r\n    const widthAdjustment = stretch(lineNormal(from, to), width / 2);\r\n\r\n    const centerline: Array<Point> = [from, to];\r\n\r\n    if (river && bridgeTexture) {\r\n        const intersectionPoints = intersect(centerline as [Point, Point], river);\r\n        intersectionPoints.sort((a, b) => a - b);\r\n        if (intersectionPoints.length === 2) {\r\n            const bridge1 = add(from, stretch(subtract(to, from), intersectionPoints[0]));\r\n            const bridge2 = add(from, stretch(subtract(to, from), intersectionPoints[1]));\r\n            return [\r\n                ...generateRoad(from, bridge1, width, texture),\r\n                ...generateRoad(bridge2, to, width, texture),\r\n                createRectangle(bridge1, bridge2, width, bridgeTexture)\r\n            ];\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < SPLITS; i++) {\r\n        const idx = randomInt(centerline.length - 1) + 1;\r\n        const split = splitLine(centerline[idx - 1], centerline[idx]);\r\n        if (split) {\r\n            centerline.splice(idx, 0, split);\r\n        }\r\n    }\r\n\r\n    const topLine: Array<Point> = centerline.map(vertex => add(vertex, invert(widthAdjustment)));\r\n    const bottomLine: Array<Point> = centerline.reverse().map(vertex => add(vertex, widthAdjustment));\r\n    return [{\r\n        vertices: [...topLine, ...bottomLine],\r\n        texture\r\n    }];\r\n}\r\n\r\nconst generateRoads = (endpoints: Array<{ from: Point, width: number }>, texture: string, bridgeTexture?: string, river?: SceneArea): Array<SceneArea> => {\r\n    if (endpoints.length > 2) {\r\n        const midpoint = endpoints.reduce((acc, curr) => [acc[0] + curr.from[0] / endpoints.length, acc[1] + curr.from[1] / endpoints.length] as Point, [0, 0] as Point);\r\n        return endpoints.flatMap(ep => generateRoad(ep.from, midpoint, ep.width, texture, bridgeTexture, river));\r\n    } else {\r\n        return generateRoad(endpoints[0].from, endpoints[1].from, endpoints[0].width, texture, bridgeTexture, river);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const Road = {\r\n    generate: generateRoads,\r\n}\r\n\r\n\r\n","import { randomBetween } from \"../Random\";\r\nimport { SceneArea, SceneObject } from \"../Scene\";\r\nimport { Point, lineLength } from \"../Vector\";\r\n\r\ndeclare const OffscreenCanvas: any;\r\n\r\nconst MAX_TRIES = 1000;\r\n\r\nconst placeObject = (dim: Point, avoid: Array<SceneObject>, radius: number, tries: number): Point | null => {\r\n    let tried = 0;\r\n    while (tried++ < tries) {\r\n        const candidate: Point = [randomBetween(0, dim[0]), randomBetween(0, dim[1])];\r\n        const farEnough = avoid.every(ob => lineLength(ob.origin, candidate) > radius + ob.radius);\r\n        if (farEnough) {\r\n            return candidate;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nconst spreadObjects = (dim: Point, avoid: Array<SceneObject>, count: number, height: number, radius: number, texture: string): Array<SceneObject> => {\r\n\r\n    let ret: Array<SceneObject> = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        const newPoint = placeObject(dim, ret.concat(avoid), radius, MAX_TRIES);\r\n        if (newPoint === null) {\r\n            console.warn(`stopped object generation at ${i}, too many tries`);\r\n            break;\r\n        }\r\n        ret.push({\r\n            origin: newPoint,\r\n            orientation: randomBetween(0, 2 * Math.PI),\r\n            height,\r\n            radius,\r\n            texture\r\n        });\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst inShapeFactory = (shape: SceneArea): ((point: Point) => boolean) => {\r\n\r\n    const canvas = new OffscreenCanvas(1, 1);\r\n    const context = canvas.getContext('2d') as unknown as CanvasRenderingContext2D;\r\n\r\n    const path: Path2D = new Path2D();\r\n    path.moveTo(...shape.vertices[0]);\r\n    shape.vertices.slice(1).forEach(vertex => {\r\n        path.lineTo(...vertex);\r\n    });\r\n    path.closePath();\r\n    return point => context.isPointInPath(path, ...point);\r\n}\r\n\r\nexport const SceneObjects = {\r\n    generate: (dim: Point, avoid: Array<SceneObject>, count: number, height: number, radius: number, texture: string, exclude: Array<SceneArea> = []): Array<SceneObject> => {\r\n        const shapeChecker = exclude.map(inShapeFactory);\r\n\r\n        return spreadObjects(dim, avoid, count, height, radius, texture).filter(ob => shapeChecker.every(sc => !sc(ob.origin)));\r\n    }\r\n\r\n}","import { randomBetween, randomInt } from \"./Random\";\r\nimport { Scene, SceneArea, SceneObject } from \"./Scene\";\r\nimport { Point } from \"./Vector\";\r\nimport { Road } from \"./generators/Road\";\r\nimport { SceneObjects } from \"./generators/SceneObjects\";\r\nimport { Texture } from \"./Textures\";\r\n\r\n\r\nconst ROAD_EDGE_OVERHANG = 2;\r\n\r\nconst randomEdgePoint = (dim: Point): Point => {\r\n    const side = randomInt(4);\r\n    const chosenDim = dim[side % 2]; // width if side is even, height if side is odd;\r\n    const pos = randomBetween(chosenDim * 0.1, chosenDim * 0.9);\r\n\r\n    switch (side) {\r\n        case 0: return [pos, -ROAD_EDGE_OVERHANG];\r\n        case 1: return [dim[0] + ROAD_EDGE_OVERHANG, pos];\r\n        case 2: return [pos, dim[1] + ROAD_EDGE_OVERHANG];\r\n        case 3: return [-ROAD_EDGE_OVERHANG, pos];\r\n        default: throw new Error('randomInt(4) returned a weird value');\r\n    }\r\n}\r\n\r\nexport const SceneGenerator = {\r\n    create: (dim: Point, baseTexture: string): Scene => ({\r\n        layers: {\r\n            base: {\r\n                areas: [{\r\n                    vertices: [[0, 0], [dim[0], 0], dim, [0, dim[1]]],\r\n                    texture: baseTexture,\r\n                }],\r\n                type: 'base'\r\n            }\r\n        },\r\n        shadowVector: [0, 0],\r\n        size: dim\r\n    }),\r\n    river: (scene: Scene, layer: string, mainWidth: number, texture: Texture, bankTexture: Texture, bankPercentage: number, bankOverhang: number): Scene => {\r\n        const dim = scene.size;\r\n\r\n        const mainEndpoints: Array<{ from: Point, width: number }> = [\r\n            { from: [randomBetween(0.1 * dim[0], 0.9 * dim[0]), -ROAD_EDGE_OVERHANG], width: mainWidth },\r\n            { from: [randomBetween(0.1 * dim[0], 0.9 * dim[0]), dim[1] + ROAD_EDGE_OVERHANG], width: mainWidth }\r\n        ];\r\n\r\n        scene.layers[layer] = {\r\n            areas: Road.generate(mainEndpoints, texture.name).map(area => {\r\n                if (bankTexture && (bankPercentage || bankOverhang)) {\r\n                    area.edge = {\r\n                        texture: bankTexture.name,\r\n                        width: [- mainWidth * bankOverhang / 200, mainWidth * bankPercentage / 200],\r\n                    };\r\n                }\r\n                return area;\r\n            }),\r\n            type: 'river'\r\n        };\r\n\r\n        return scene;\r\n    },\r\n    roads: (scene: Scene, layer: string, mainWidth: number, sideRoads: Array<number>, texture: Texture, bridgeTexture: Texture | undefined, river: SceneArea | undefined, vergeTexture: Texture | undefined, vergePercentage: number, vergeOverhang: number): Scene => {\r\n        const dim = scene.size;\r\n\r\n        let mainEndpoints: Array<{ from: Point, width: number }> = [\r\n            { from: [-ROAD_EDGE_OVERHANG, randomBetween(0.1 * dim[1], 0.9 * dim[1])], width: mainWidth },\r\n            { from: [dim[0] + ROAD_EDGE_OVERHANG, randomBetween(0.1 * dim[1], 0.9 * dim[1])], width: mainWidth }\r\n        ];\r\n\r\n        const extraEndpoints = sideRoads.map(width => ({\r\n            from: randomEdgePoint(dim),\r\n            width: width\r\n        }));\r\n\r\n        scene.layers[layer] = {\r\n            areas: Road.generate([...mainEndpoints, ...extraEndpoints], texture.name,\r\n                bridgeTexture?.name,\r\n                river).map(area => {\r\n                    if (vergeTexture && (vergePercentage || vergeOverhang)) {\r\n                        area.edge = {\r\n                            texture: vergeTexture.name,\r\n                            width: [- mainWidth * vergeOverhang / 200, mainWidth * vergePercentage / 200],\r\n                        };\r\n                    }\r\n                    return area;\r\n                }),\r\n            type: 'road'\r\n        };\r\n\r\n        return scene;\r\n    },\r\n    objects: (scene: Scene, layer: string, count: number, texture: Texture): Scene => {\r\n        const currentObjects: Array<SceneObject> = scene.layers[layer]?.objects ?? [];\r\n        const roadAreas: Array<SceneArea> = [...scene.layers.road.areas ?? [], ...scene.layers.river.areas ?? []];\r\n        const newObjects = SceneObjects.generate(scene.size, currentObjects, count, texture.height, texture.radius, texture.name, roadAreas);\r\n        scene.layers[layer] = {\r\n            objects: currentObjects.concat(newObjects),\r\n            type: 'object'\r\n        }\r\n        return scene;\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gravel.fadd9e77.jpg\";","export default __webpack_public_path__ + \"static/media/grass.1bdb8368.jpg\";","export default __webpack_public_path__ + \"static/media/tree.251e1382.png\";","export default __webpack_public_path__ + \"static/media/tree2.b70d7e22.png\";","export default __webpack_public_path__ + \"static/media/rock.f8863753.png\";","export default __webpack_public_path__ + \"static/media/dirtroad.3f84b32a.jpg\";","export default __webpack_public_path__ + \"static/media/lightergrass.775fd4e3.jpg\";","export default __webpack_public_path__ + \"static/media/water.5bcc6117.jpg\";","export default __webpack_public_path__ + \"static/media/bridge.01e94610.png\";","export default __webpack_public_path__ + \"static/media/bridge2.c503a7ba.png\";","export default __webpack_public_path__ + \"static/media/soil.9c952be7.jpg\";","export default __webpack_public_path__ + \"static/media/moss.7486eee9.jpg\";","export default __webpack_public_path__ + \"static/media/snow.cdc2b6b3.jpg\";","export default __webpack_public_path__ + \"static/media/coarse-snow.b9df7fb0.jpg\";","export default __webpack_public_path__ + \"static/media/ice.6cad5e0a.jpg\";","import React, { useEffect, useReducer } from 'react';\n\nimport gravel from './textures/gravel.jpg';\nimport grass from './textures/grass.jpg';\nimport tree from './textures/tree.png';\nimport tree2 from './textures/tree2.png';\nimport rock from './textures/rock.png';\nimport dirt from './textures/dirtroad.jpg';\nimport lighterGrass from './textures/lightergrass.jpg';\nimport water from './textures/water.jpg';\nimport bridge from './textures/bridge.png';\nimport bridge2 from './textures/bridge2.png';\nimport soil from './textures/soil.jpg';\nimport moss from './textures/moss.jpg';\nimport snow from './textures/snow.jpg';\nimport coarseSnow from './textures/coarse-snow.jpg';\nimport ice from './textures/ice.jpg';\n\nexport interface Texture {\n    name: string;\n    category: TextureCategory;\n    url: string;\n    type: 'single' | 'pattern';\n    scale: number;\n    height: number;\n    radius: number;\n    alphaMultiplier?: number;\n    loadedImage: HTMLImageElement;\n}\n\nexport const TINTS: Record<string, string> = {\n    sunset: 'rgba(230,120,0,0.15)',\n    evening: 'rgba(0,0,250,0.2)',\n    night: 'rgba(0,0,250,0.3)',\n}\n\nexport type TextureCategory = 'ground' | 'river' | 'road' | 'bridge' | 'tree' | 'rock' | 'river-edge' | 'road-edge';\n\nexport const TEXTURES: Array<Omit<Texture, 'loadedImage' | 'transparentImage'>> = [\n    {\n        name: 'water',\n        url: water,\n        type: 'pattern',\n        scale: 1,\n        category: 'river',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'ice',\n        url: ice,\n        type: 'pattern',\n        scale: 2,\n        category: 'river',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'bridge',\n        url: bridge,\n        type: 'pattern',\n        scale: 1,\n        category: 'bridge',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'straight bridge',\n        url: bridge2,\n        type: 'pattern',\n        scale: 1,\n        category: 'bridge',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'gravel',\n        url: gravel,\n        type: 'pattern',\n        scale: 1,\n        category: 'road',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'dirt',\n        url: dirt,\n        type: 'pattern',\n        scale: 1,\n        category: 'road',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'grass',\n        url: grass,\n        type: 'pattern',\n        scale: 3,\n        category: 'ground',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'snow',\n        url: snow,\n        type: 'pattern',\n        scale: 3,\n        category: 'ground',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'snow bank',\n        url: coarseSnow,\n        type: 'pattern',\n        scale: 0.7,\n        category: 'road-edge',\n        height: 0,\n        radius: 0,\n        alphaMultiplier: 0.7\n    },\n    {\n        name: 'lighter grass',\n        url: lighterGrass,\n        type: 'pattern',\n        scale: 1,\n        category: 'ground',\n        height: 0,\n        radius: 0,\n    },\n    {\n        name: 'soil',\n        url: soil,\n        type: 'pattern',\n        scale: 1,\n        category: 'river-edge',\n        height: 0,\n        radius: 0,\n        alphaMultiplier: 0.7\n    },\n    {\n        name: 'moss',\n        url: moss,\n        type: 'pattern',\n        scale: 1,\n        category: 'road-edge',\n        height: 0,\n        radius: 0,\n        alphaMultiplier: 0.3\n    },\n    {\n        name: 'tree',\n        url: tree,\n        type: 'single',\n        scale: 2,\n        category: 'tree',\n        height: 8,\n        radius: 1,\n    },\n    {\n        name: 'bigtree',\n        url: tree,\n        type: 'single',\n        scale: 4,\n        category: 'tree',\n        height: 16,\n        radius: 2,\n    },\n    {\n        name: 'other tree',\n        url: tree2,\n        type: 'single',\n        scale: 3,\n        category: 'tree',\n        height: 12,\n        radius: 1.5,\n    },\n    {\n        name: 'rock',\n        url: rock,\n        type: 'single',\n        scale: 0.3,\n        category: 'rock',\n        height: 2,\n        radius: 0.25,\n    },\n]\n\ndeclare const OffscreenCanvas: any;\n\nconst makeImageTransparent = async (image: HTMLImageElement, alphaMultiplier: number): Promise<HTMLImageElement> => {\n    const offscreen = new OffscreenCanvas(image.naturalWidth, image.naturalHeight);\n    const osContext = offscreen.getContext('2d') as CanvasRenderingContext2D;\n    osContext.drawImage(image, 0, 0);\n    const imageData = osContext.getImageData(0, 0, image.naturalWidth, image.naturalHeight);\n    for (let i = 3; i < imageData.data.length; i += 4) {\n        imageData.data.set([imageData.data[i] * alphaMultiplier], i);\n    }\n    osContext.putImageData(imageData, 0, 0);\n    const output = new Image();\n\n    const blob = await offscreen.convertToBlob({\n        type: \"image/png\",\n    });\n\n    output.src = URL.createObjectURL(blob); // use toDataURL() to avoid cleanup problems\n    return output;\n}\n\n\nexport const Textures: React.FC<{ onLoaded: (textures: Array<Texture>) => unknown }> = ({ onLoaded }) => {\n\n    const [imagesLoaded, imageLoaded] = useReducer((prevstate: number, action: {}) => {\n        return prevstate + 1;\n    }, 0);\n\n    useEffect(() => {\n        if (imagesLoaded === TEXTURES.length) {\n            (async () => {\n                const loaded: Array<Texture> = [];\n                for (let i = 0; i < TEXTURES.length; i++) {\n                    const t = TEXTURES[i];\n                    let loadedImage = document.getElementById(t.name) as HTMLImageElement;\n                    if (t.alphaMultiplier !== undefined) {\n                        loadedImage = await makeImageTransparent(loadedImage, t.alphaMultiplier);\n                        console.log(loadedImage);\n                    }\n                    loaded.push({ ...t, loadedImage });\n                }\n                onLoaded(loaded);\n\n            })();\n        }\n    }, [imagesLoaded, onLoaded]);\n\n    return <>\n        {TEXTURES.map(t => <img key={t.name} src={t.url} id={t.name} style={{ display: 'none' }} alt='' onLoad={imageLoaded} />)}\n    </>;\n}","import { ExpandMore } from '@mui/icons-material';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\n\r\ninterface DefinitionCardProps {\r\n    title: string;\r\n    titleContent?: JSX.Element;\r\n    enabled?: boolean;\r\n    blocks: Array<{\r\n        title?: string;\r\n        content: JSX.Element;\r\n    }>;\r\n\r\n}\r\n\r\nexport const DefinitionCard: React.FC<DefinitionCardProps> = ({ title, enabled, blocks, titleContent }) => <Accordion disabled={!enabled}>\r\n    <AccordionSummary expandIcon={<ExpandMore />}>\r\n        <Typography>{title} {titleContent}</Typography>\r\n\r\n    </AccordionSummary>\r\n    <AccordionDetails>\r\n        {blocks.map(block => <Box sx={{ m: 1 }}>\r\n            {block.title && <Typography>{block.title}</Typography>}\r\n            <Box sx={{ borderTop: block.title ? 1 : 0, pt: block.title ? 1 : 0 }}>\r\n                {block.content}\r\n            </Box>\r\n        </Box>)}\r\n    </AccordionDetails>\r\n</Accordion>;","import { FormControlLabel, Slider } from '@mui/material';\r\nimport React from 'react';\r\n\r\ninterface NumberInputProps {\r\n    value: number,\r\n    min: number,\r\n    max: number,\r\n    step?: number,\r\n    label: string,\r\n    width?: number,\r\n    onChange: (value: number) => unknown\r\n}\r\n\r\nexport const NumberInput: React.FC<NumberInputProps> = ({ value, min, max, step, label, width = 90, onChange }) => {\r\n    return <FormControlLabel sx={{ width: `${width}%` }} label={label} labelPlacement='top' control={<Slider value={value} valueLabelDisplay='auto' min={min} max={max} step={step} marks={!!step} onChange={(_, value) => onChange(value as number)} />} />;\r\n}","import { Select, MenuItem, FormControl, InputLabel } from '@mui/material';\r\nimport React from 'react';\r\nimport { Texture, TextureCategory } from './Textures';\r\n\r\nexport interface TextureSelectorProps {\r\n    textures: Record<string, Texture>,\r\n    type: 'single' | 'pattern',\r\n    category?: TextureCategory,\r\n    label?: string,\r\n    value: string,\r\n    width?: number,\r\n    onChange: (name: string) => unknown,\r\n}\r\n\r\n\r\nexport const TextureSelector: React.FC<TextureSelectorProps> = ({ textures, type, category, label, value, width = 90, onChange }) => {\r\n    const renderValue = (t: string) => <><img alt={`Texture: ${t}`} style={{ height: '1.5rem', marginRight: '0.2rem' }} src={textures[t].url} />{t}</>;\r\n\r\n    return <FormControl sx={{ width: `${width}%` }}>\r\n        <InputLabel>{label}</InputLabel>\r\n        <Select\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value as string)}\r\n            label={label}\r\n            displayEmpty\r\n            renderValue={selected => selected ? renderValue(selected) : label}\r\n            autoWidth\r\n        >\r\n            <MenuItem value=''>None</MenuItem>\r\n            {Object.keys(textures)\r\n                .filter(t => textures[t].type === type)\r\n                .filter(t => !category || (textures[t].category === category))\r\n                .map(t => <MenuItem value={t}>{renderValue(t)}</MenuItem>)}\r\n        </Select>\r\n    </FormControl>;\r\n}","import { Add, ClearAll, Delete } from '@mui/icons-material';\r\nimport { Button } from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { DefinitionCard } from './DefinitionCard';\r\nimport { NumberInput } from './NumberInput';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\n\r\nexport interface ObjectLayerCardProps {\r\n    name: string;\r\n    textures: Record<string, Texture>;\r\n    generateObjects: (count: number, texture: string) => unknown;\r\n    clearLayer: () => unknown;\r\n    deleteLayer: () => unknown;\r\n}\r\n\r\n\r\nexport const ObjectLayerCard: React.FC<ObjectLayerCardProps> = ({ name, textures, generateObjects, clearLayer, deleteLayer }) => {\r\n    const [count, setCount] = useState<number>(0);\r\n    const [texture, setTexture] = useState<string>('');\r\n\r\n    return <DefinitionCard\r\n        title={`Layer: ${name}`}\r\n        enabled\r\n        titleContent={<>\r\n            <Button startIcon={<Add />} disabled={count === 0 || texture === ''} onClick={e => { generateObjects(count, texture); e.stopPropagation() }} >Add</Button>\r\n            <Button startIcon={<ClearAll />} onClick={e => { clearLayer(); e.stopPropagation(); }} >Clear</Button>\r\n            <Button startIcon={<Delete />} onClick={e => { deleteLayer(); e.stopPropagation(); }} >Remove</Button>\r\n        </>}\r\n        blocks={[\r\n            {\r\n                content: <>\r\n                    <NumberInput width={40} label='No. of objects:' value={count} step={1} min={0} max={100} onChange={setCount} />\r\n                    <TextureSelector width={40} label='Object texture' value={texture} textures={textures ?? {}} type='single' onChange={setTexture} />\r\n                </>\r\n            }\r\n        ]}\r\n    />\r\n}","import { Add } from '@mui/icons-material';\r\nimport { Accordion, AccordionSummary, Button, InputAdornment, TextField, Typography } from '@mui/material';\r\nimport React, { useState } from 'react';\r\n\r\nexport interface CreateLayerCardProps {\r\n    layers: Array<string>;\r\n    onCreate: (name: string) => unknown;\r\n}\r\n\r\n\r\nexport const CreateLayerCard: React.FC<CreateLayerCardProps> = ({ layers, onCreate }) => {\r\n    const [name, setName] = useState<string>('');\r\n\r\n    return <Accordion onClick={e => e.stopPropagation()}>\r\n        <AccordionSummary>\r\n            <Typography>\r\n                <TextField variant='standard' size='small' label='Add object layer' value={name} onChange={e => setName(e.target.value)}\r\n                    InputProps={{\r\n                        endAdornment: <InputAdornment position=\"end\">\r\n                            <Button\r\n                                startIcon={<Add />}\r\n                                disabled={name === '' || layers.includes(name)}\r\n                                onClick={() => {\r\n                                    onCreate(name);\r\n                                    setName('');\r\n                                }}>\r\n                                Create\r\n                            </Button>\r\n                        </InputAdornment>\r\n\r\n                    }}\r\n                />\r\n            </Typography>\r\n        </AccordionSummary>\r\n    </Accordion>;\r\n}","import { Add, Delete } from '@mui/icons-material';\r\nimport { List, ListItem, Button, IconButton } from '@mui/material';\r\nimport { range } from 'lodash';\r\nimport React from 'react';\r\n\r\nexport interface ListComponentProps {\r\n    items: number;\r\n    itemFactory: (index: number) => JSX.Element;\r\n    addItem: () => unknown;\r\n    removeItem: (index: number) => unknown;\r\n    name: string;\r\n}\r\n\r\nexport const ListComponent: React.FC<ListComponentProps> = ({ items, itemFactory, addItem, removeItem, name }) => {\r\n    return <List>\r\n        {range(0, items).map(index => <ListItem>\r\n            {itemFactory(index)} <IconButton onClick={() => removeItem(index)}><Delete /></IconButton>\r\n        </ListItem>)}\r\n        <ListItem>\r\n            <Button startIcon={<Add />} onClick={addItem}>{`Add ${name}`}</Button>\r\n        </ListItem>\r\n    </List>;\r\n}","import React, { useState } from 'react';\r\nimport { ListComponent } from './ListComponent';\r\nimport { Button } from '@mui/material';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\nimport { NumberInput } from './NumberInput';\r\nimport { DefinitionCard } from './DefinitionCard';\r\n\r\nexport interface RoadLayerCardProps {\r\n    name: string;\r\n    textures: Record<string, Texture>;\r\n    sceneHasRiver: boolean;\r\n    generateRoads: (\r\n        mainWidth: number,\r\n        sideRoads: Array<number>,\r\n        texture: string,\r\n        bridgeTexture: string,\r\n        vergeTexture: string,\r\n        vergePercentage: number,\r\n        vergeOverhang: number\r\n    ) => unknown;\r\n}\r\n\r\n\r\nexport const RoadLayerCard: React.FC<RoadLayerCardProps> = ({ name, textures, generateRoads, sceneHasRiver }) => {\r\n    const [mainWidth, setMainWidth] = useState<number>(0);\r\n    const [texture, setTexture] = useState<string>('');\r\n    const [bridgeTexture, setBridgeTexture] = useState<string>('');\r\n    const [sideRoads, setSideRoads] = useState<Array<number>>([]);\r\n    const [vergeTexture, setVergeTexture] = useState<string>('');\r\n    const [vergePercentage, setVergePercentage] = useState<number>(0);\r\n    const [vergeOverhang, setVergeOverhang] = useState<number>(0);\r\n\r\n    return <DefinitionCard\r\n        title='Roads'\r\n        enabled\r\n        titleContent={\r\n            <Button\r\n                disabled={texture === ''}\r\n                onClick={e => { generateRoads(mainWidth, sideRoads, texture, bridgeTexture, vergeTexture, vergePercentage, vergeOverhang); e.stopPropagation() }}>\r\n                Regenerate\r\n            </Button>\r\n        }\r\n        blocks={[\r\n            {\r\n                content: <>\r\n                    <NumberInput width={30} label='Main road width' value={mainWidth} min={0} max={10} step={0.1} onChange={setMainWidth} />\r\n                    <TextureSelector width={30} value={texture} label='Road texture' textures={textures ?? {}} category='road' type='pattern' onChange={setTexture} />\r\n                    {sceneHasRiver && <TextureSelector width={30} value={bridgeTexture} label='Bridge texture' textures={textures ?? {}} category='bridge' type='pattern' onChange={setBridgeTexture} />}\r\n                </>\r\n            },\r\n            {\r\n                title: 'Side roads',\r\n                content: <ListComponent\r\n                    items={sideRoads.length}\r\n                    name='side road'\r\n                    addItem={() => {\r\n                        setSideRoads([...sideRoads, 0]);\r\n                    }}\r\n                    removeItem={index => {\r\n                        sideRoads.splice(index, 1);\r\n                        setSideRoads([...sideRoads]);\r\n                    }}\r\n                    itemFactory={index =>\r\n                        <NumberInput label='Side road width:' value={sideRoads[index]} min={0} max={10} step={0.1} onChange={value => { sideRoads[index] = value; setSideRoads([...sideRoads]); }} />} />\r\n            },\r\n            {\r\n                title: 'Verge',\r\n                content: <>\r\n                    <NumberInput width={25} label='Verge width %' value={vergePercentage} min={0} max={100} step={1} onChange={setVergePercentage} />\r\n                    <NumberInput width={25} label='Verge overhang %' value={vergeOverhang} min={0} max={100} step={1} onChange={setVergeOverhang} />\r\n                    <TextureSelector width={30} value={vergeTexture} textures={textures ?? {}} type='pattern' category='road-edge' onChange={setVergeTexture} label='Verge texture' />\r\n                </>\r\n            },\r\n        ]}\r\n    />;\r\n}","import { Select, MenuItem } from '@mui/material';\r\nimport React from 'react';\r\nimport { DefinitionCard } from './DefinitionCard';\r\nimport { NumberInput } from './NumberInput';\r\nimport { TINTS } from './Textures';\r\nimport { fromPolar, lineLength, Point } from './Vector';\r\n\r\nexport interface VisualsCardProps {\r\n    shadowVector: Point;\r\n    onShadowChange: (shadowVector: Point) => unknown;\r\n    tint: string;\r\n    onTintChange: (tint: string) => unknown;\r\n    resolution: number;\r\n    onResolutionChange: (resolution: number) => unknown;\r\n    edgeShade: number;\r\n    onEdgeShadeChange: (edgeShade: number) => unknown;\r\n}\r\n\r\n\r\nexport const VisualsCard: React.FC<VisualsCardProps> = ({ tint, shadowVector, onShadowChange, onTintChange, resolution, onResolutionChange, edgeShade, onEdgeShadeChange }) => {\r\n    const shadowLength = Math.round(lineLength(shadowVector) * 10);\r\n    const shadowAngle = Math.round(Math.atan2(shadowVector[1], shadowVector[0]) * 180 / Math.PI);\r\n\r\n    return <DefinitionCard\r\n        title='Visual tweaks'\r\n        enabled\r\n        blocks={[\r\n            {\r\n                content: <>\r\n                    <NumberInput width={25} label='Edge shade' min={0} max={300} step={5} value={edgeShade} onChange={onEdgeShadeChange} />\r\n                    <Select sx={{ width: '25%' }} value={tint || 'none'} onChange={e => onTintChange(e.target.value as string)}>\r\n                        <MenuItem value='none'>no tint</MenuItem>\r\n                        {Object.keys(TINTS).map(t => <MenuItem value={TINTS[t]}>{t}</MenuItem>)}\r\n                    </Select>\r\n                    <NumberInput label='Pixels per grid' width={35} min={20} max={100} step={5} value={resolution} onChange={onResolutionChange} />\r\n                </>\r\n            },\r\n            {\r\n                title: 'Shadows',\r\n                content: <>\r\n                    <NumberInput width={40} label='Shadow length' value={shadowLength} min={0} max={50} step={1} onChange={value => onShadowChange(fromPolar(value / 10, Number(shadowAngle) * Math.PI / 180))} />\r\n                    <NumberInput width={40} label='Shadow direction' step={5} min={-180} max={180} value={shadowAngle} onChange={value => onShadowChange(fromPolar(shadowLength / 10, value * Math.PI / 180))} />\r\n                </>\r\n            }\r\n        ]}\r\n    />\r\n}","import { Button } from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { DefinitionCard } from './DefinitionCard';\r\nimport { NumberInput } from './NumberInput';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\nimport { Point } from './Vector';\r\n\r\ninterface BaseLayerCardProps {\r\n    textures: Record<string, Texture>;\r\n    createScene: (dimensions: Point, baseTexture: string) => unknown;\r\n}\r\n\r\nexport const BaseLayerCard: React.FC<BaseLayerCardProps> = ({ textures, createScene }) => {\r\n\r\n    const [texture, setTexture] = useState<string>('');\r\n    const [width, setWidth] = useState<number>(10);\r\n    const [height, setHeight] = useState<number>(10);\r\n\r\n    return <DefinitionCard\r\n        title={`Scene (${width} x ${height})`}\r\n        titleContent={<Button\r\n            disabled={texture === ''}\r\n            onClick={e => { createScene([width, height], texture); e.stopPropagation(); }}>\r\n            Create\r\n        </Button>\r\n        }\r\n        enabled\r\n        blocks={[{\r\n            title: 'Background',\r\n            content: <>\r\n                <NumberInput width={25} value={width} min={1} max={50} step={1} onChange={setWidth} label='Width' />\r\n                <NumberInput width={25} value={height} min={1} max={50} step={1} onChange={setHeight} label='Height' />\r\n                <TextureSelector width={30} value={texture} textures={textures ?? {}} type='pattern' category='ground' onChange={setTexture} label='Ground texture' />\r\n            </>\r\n        },\r\n        ]} />;\r\n\r\n}","import { Button } from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { DefinitionCard } from './DefinitionCard';\r\nimport { NumberInput } from './NumberInput';\r\nimport { Texture } from './Textures';\r\nimport { TextureSelector } from './TextureSelector';\r\n\r\nexport interface RiverLayerCardProps {\r\n    name: string;\r\n    textures: Record<string, Texture>;\r\n    generateRiver: (mainWidth: number, texture: string, bankTexture: string, bankPercentage: number, bankOverhang: number) => unknown;\r\n}\r\n\r\n\r\nexport const RiverLayerCard: React.FC<RiverLayerCardProps> = ({ name, textures, generateRiver }) => {\r\n    const [mainWidth, setMainWidth] = useState<number>(0);\r\n    const [texture, setTexture] = useState<string>('');\r\n    const [bankTexture, setBankTexture] = useState<string>('');\r\n    const [bankPercentage, setBankPercentage] = useState<number>(0);\r\n    const [bankOverhang, setBankOverhang] = useState<number>(0);\r\n\r\n    return <DefinitionCard\r\n        title='River'\r\n        enabled\r\n        titleContent={\r\n            <Button\r\n                disabled={texture === ''}\r\n                onClick={e => { generateRiver(mainWidth, texture, bankTexture, bankPercentage, bankOverhang); e.stopPropagation() }}>\r\n                Regenerate\r\n            </Button>\r\n        }\r\n        blocks={[\r\n            {\r\n                content: <>\r\n                    <NumberInput width={40} label='Width' value={mainWidth} min={0} max={10} step={0.1} onChange={setMainWidth} />\r\n                    <TextureSelector width={40} value={texture} textures={textures ?? {}} type='pattern' category='river' onChange={setTexture} label='River texture' />\r\n                </>\r\n            },\r\n            {\r\n                title: 'Riverbank',\r\n                content: <>\r\n                    <NumberInput width={25} label='Width %' value={bankPercentage} min={0} max={100} step={1} onChange={setBankPercentage} />\r\n                    <NumberInput width={25} label='Overhang %' value={bankOverhang} min={0} max={100} step={1} onChange={setBankOverhang} />\r\n                    <TextureSelector width={30} value={bankTexture} textures={textures ?? {}} type='pattern' category='river-edge' onChange={setBankTexture} label='Texture' />\r\n                </>\r\n            },\r\n        ]}\r\n    />\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { drawScene } from './ShapeDrawer';\r\nimport { SceneGenerator } from './SceneGenerator';\r\nimport { Point } from './Vector';\r\nimport { Texture, Textures } from './Textures';\r\nimport { Scene } from './Scene';\r\nimport { ObjectLayerCard } from './ObjectLayerCard';\r\nimport { CreateLayerCard } from './CreateLayerCard';\r\nimport { RoadLayerCard } from './RoadLayerCard';\r\nimport { VisualsCard } from './VisualsCard';\r\nimport { BaseLayerCard } from './BaseLayerCard';\r\nimport { RiverLayerCard } from './RiverLayerCard';\r\nimport { Card, CardContent, FormControlLabel, Stack, Switch } from '@mui/material';\r\n\r\nconst SCALE = 70;\r\n\r\nexport const Canvas: React.FC<{}> = () => {\r\n\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [textures, setTeztures] = useState<Record<string, Texture>>();\r\n    const [scene, setScene] = useState<Scene>(SceneGenerator.create([10, 10], 'grass'));\r\n    const [resolution, setResolution] = useState<number>(SCALE);\r\n    const [debug, setDebug] = useState<boolean>(false);\r\n\r\n    const regenerateRoads = useCallback((layer: string, mainWidth: number, sideRoads: Array<number>, texture: string, bridgeTexture: string, vergeTexture: string, vergePercentage: number, vergeOverhang: number) => {\r\n        if (textures) {\r\n            setScene({ ...SceneGenerator.roads(scene, layer, mainWidth, sideRoads, textures[texture], textures[bridgeTexture], scene.layers.river?.areas?.[0], textures[vergeTexture], vergePercentage, vergeOverhang) });\r\n        }\r\n    }, [scene, textures]);\r\n\r\n    const regenerateRiver = useCallback((layer: string, mainWidth: number, texture: string, bankTexture: string, bankPercentage: number, bankOverhang: number) => {\r\n        if (textures) {\r\n            setScene({ ...SceneGenerator.river(scene, layer, mainWidth, textures[texture], textures[bankTexture], bankPercentage, bankOverhang) });\r\n        }\r\n    }, [scene, textures]);\r\n\r\n\r\n    const clearLayer = useCallback((layer: string) => {\r\n        delete scene.layers?.[layer]?.areas;\r\n        delete scene.layers?.[layer]?.objects;\r\n        setScene({ ...scene });\r\n    }, [scene]);\r\n\r\n    const removeLayer = useCallback((layer: string) => {\r\n        delete scene.layers?.[layer];\r\n        setScene({ ...scene });\r\n    }, [scene]);\r\n\r\n    const createLayer = useCallback((layer: string) => {\r\n        scene.layers[layer] = { type: 'object' };\r\n        setScene({ ...scene });\r\n    }, [scene]);\r\n\r\n    const generateObjects = useCallback((layer: string, count: number, texture: string) => {\r\n        if (textures) {\r\n            SceneGenerator.objects(scene, layer, count, textures[texture]);\r\n        }\r\n        setScene({ ...scene });\r\n    }, [scene, textures]);\r\n\r\n    const createScene = useCallback((dimension: Point, texture: string) => {\r\n        setScene(SceneGenerator.create(dimension, texture));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (textures) {\r\n            const canvas = canvasRef.current;\r\n            if (canvas) {\r\n                const context = canvas.getContext('2d');\r\n                if (context) {\r\n                    drawScene(context, textures, scene, debug);\r\n                }\r\n            }\r\n        }\r\n    }, [textures, scene, resolution, debug]);\r\n\r\n    const onTexturesLoaded = useCallback((textures: Array<Texture>) => {\r\n        const textureMap: Record<string, Texture> = textures.reduce((acc, curr) => { acc[curr.name] = curr; return acc; }, {} as Record<string, Texture>);\r\n        setTeztures(textureMap);\r\n    }, []);\r\n\r\n    return <>\r\n        <Textures onLoaded={onTexturesLoaded} />\r\n        <div style={{ display: 'flex', width: '100%' }}>\r\n            <Stack spacing={1}>\r\n                <BaseLayerCard textures={textures ?? {}} createScene={createScene} />\r\n                <RiverLayerCard name='river' textures={textures ?? {}} generateRiver={regenerateRiver.bind(null, 'river')} />\r\n                <RoadLayerCard name='road' sceneHasRiver={!!scene.layers.river} textures={textures ?? {}} generateRoads={regenerateRoads.bind(null, 'road')} />\r\n                {Object.keys(scene.layers).filter(layer => scene.layers[layer].type === 'object').map(layer => {\r\n                    return <ObjectLayerCard\r\n                        name={layer}\r\n                        textures={textures ?? {}}\r\n                        generateObjects={(count, texture) => generateObjects(layer, count, texture)}\r\n                        clearLayer={() => clearLayer(layer)}\r\n                        deleteLayer={() => removeLayer(layer)}\r\n                    />\r\n                })}\r\n                {scene.layers.road && <CreateLayerCard layers={Object.keys(scene.layers)} onCreate={createLayer} />}\r\n\r\n                <VisualsCard tint={scene.tint ?? ''} shadowVector={scene.shadowVector} onShadowChange={shadow => {\r\n                    scene.shadowVector = shadow;\r\n                    setScene({ ...scene });\r\n                }}\r\n                    onTintChange={tint => {\r\n                        scene.tint = tint;\r\n                        setScene({ ...scene });\r\n                    }}\r\n                    resolution={resolution}\r\n                    onResolutionChange={setResolution}\r\n                    edgeShade={scene.edgeShade ?? 0}\r\n                    onEdgeShadeChange={edgeShade => {\r\n                        scene.edgeShade = Math.max(0, edgeShade);\r\n                        setScene({ ...scene });\r\n                    }}\r\n                />\r\n                <Card>\r\n                    <CardContent>\r\n                        <FormControlLabel control={<Switch checked={debug} onChange={() => setDebug(!debug)} />} label=\"Debug mode\" />\r\n                    </CardContent>\r\n                </Card>\r\n            </Stack>\r\n            <canvas style={{ width: `${scene.size[0] * resolution}px`, height: `${scene.size[1] * resolution}px` }} ref={canvasRef} width={`${scene.size[0] * resolution}px`} height={`${scene.size[1] * resolution}px`} />\r\n        </div>\r\n    </>;\r\n}","import React from 'react';\nimport { Canvas } from './Canvas';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}